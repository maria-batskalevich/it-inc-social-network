{"version":3,"sources":["components/Dialogues/Dialogues.module.css","components/Users/users.module.css","App.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Header/Header.module.css","components/Dialogues/DialogueItem/DialogueItem.module.css","components/Dialogues/Message/Message.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Navbar/Navbar.module.css","redux/profileReducer.ts","redux/dialoguesReducer.ts","redux/usersReducer.ts","redux/authReducer.ts","redux/redux-store.ts","components/Navbar/Navbar.tsx","components/Dialogues/DialogueItem/DialogueItem.tsx","components/Dialogues/Message/Message.tsx","components/Dialogues/DialoguesContainer.tsx","components/Dialogues/Dialogues.tsx","assets/images/user.png","components/Users/Users.tsx","assets/images/loadingBook.svg","components/common/Preloader/Preloader.tsx","api/api.tsx","components/Users/UsersContainer.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","App.tsx","index.tsx"],"names":["module","exports","ADD_POST","UPDATE_NEW_POST_TEXT","SET_USER_PROFILE","initialProfileState","posts","newPostText","userProfile","UPDATE_NEW_MESSAGE_TEXT","SEND_MESSAGE","initialDialoguesState","dialogues","id","personName","messages","messageText","newMessageText","FOLLOW","UNFOLLOW","SET_USERS","initialUsersState","users","pageSize","totalUsersCount","currentPage","isFetching","followingInProgress","follow","userId","type","unfollow","SET_USER_DATA","initialAuthUserState","email","login","isAuth","authReducer","state","action","data","reduxReducers","combineReducers","profilePage","newPost","postText","likesCount","inputPostText","dialoguesPage","inputMessageText","usersPage","map","u","followed","filter","auth","reduxStore","createStore","Navbar","className","s","nav","item","to","activeClassName","active","DialogueItem","props","path","classes","dialogue","Message","message","DialoguesContainer","connect","updateNewMessageText","sendMessage","dialogueElements","messageElements","dialoguesList","messagesList","value","onChange","event","currentTarget","placeholder","onClick","Users","pagesCount","Math","ceil","pages","i","push","p","selectedPage","page","e","onPageChanged","avatar","src","photos","small","user","disabled","some","toggleFollowingProgress","axios","delete","withCredentials","headers","then","promise","resultCode","post","name","status","Preloader","preloader","alt","instance","create","baseURL","usersAPI","get","UsersContainer","pageNumber","setCurrentPage","toggleIsFetching","setUsers","items","this","setTotalUsersCount","totalCount","React","Component","ProfileInfo","image","descriptionBlock","Post","MyPostsContainer","updateNewPostText","addPost","postsElements","postsBlock","Profile","ProfileClassContainer","render","userID","match","params","setUserProfile","ProfileURLContainer","withRouter","ProfileContainer","Header","header","loginBlock","HeaderClassContainer","setAuthUserData","HeaderContainer","App","appWrapper","appWrapperContent","ReactDOM","store","document","getElementById"],"mappings":"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","file":"static/js/main.347d6e59.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialoguesPage\":\"Dialogues_dialoguesPage__1gZ1M\",\"dialoguesList\":\"Dialogues_dialoguesList__xmogx\",\"active\":\"Dialogues_active__jc3c8\",\"messagesList\":\"Dialogues_messagesList__EVw8R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"users_avatar__2NBm8\",\"selectedPage\":\"users_selectedPage__2VY4r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appWrapper\":\"App_appWrapper__1N3As\",\"appWrapperContent\":\"App_appWrapperContent__1Rv3K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__mkR90\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2-bek\",\"posts\":\"MyPosts_posts__zQK6_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3vltG\",\"loginBlock\":\"Header_loginBlock__j78vF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogue\":\"DialogueItem_dialogue__28rWi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__3tJw3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1zOmz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__-FuZV\",\"item\":\"Navbar_item__2-lI7\",\"active\":\"Navbar_active__KiUqI\"};","\nexport type InitialProfileStateType = typeof initialProfileState;\ntype ProfileReducerActionTypes =\n    | ReturnType<typeof addPost>\n    | ReturnType<typeof updateNewPostText>\n    | ReturnType<typeof setUserProfile>;\n\nconst ADD_POST = \"ADD-POST\";\nconst UPDATE_NEW_POST_TEXT = \"UPDATE-NEW-POST-TEXT\";\nconst SET_USER_PROFILE = 'SET-USER-PROFILE'\nexport type PostType = {\n    id: number;\n    postText: string;\n    likesCount: number;\n};\ntype UserContactsType = {\n    github: string;\n    vk: string;\n    facebook: string;\n    instagram: string;\n    twitter: string;\n    website: string;\n    youtube: string;\n    mainLink: string;\n};\ntype PhotosType = {\n    small: string;\n    large: string;\n};\n\nexport type UserProfileType = {\n    aboutMe: string;\n    userId: number;\n    lookingForAJob: boolean;\n    lookingForAJobDescription: string;\n    fullName: string;\n    contacts: UserContactsType;\n    photos: PhotosType;\n};\n\nconst initialProfileState = {\n    posts: [] as PostType[],\n    newPostText: \"\",\n    userProfile: {} as UserProfileType,\n};\n\nexport const profileReducer = (\n    state: InitialProfileStateType = initialProfileState,\n    action: ProfileReducerActionTypes\n): InitialProfileStateType => {\n    switch (action.type) {\n        case ADD_POST:\n            const newPost = {\n                id: 4,\n                postText: state.newPostText,\n                likesCount: 0,\n            };\n            return {\n                ...state,\n                posts: [...state.posts, newPost],\n                newPostText: \"\",\n            };\n        case UPDATE_NEW_POST_TEXT:\n            return {\n                ...state,\n                newPostText: action.inputPostText,\n            };\n        case SET_USER_PROFILE: {\n            return {...state, userProfile: action.userProfile};\n        }\n\n        default:\n            return state;\n    }\n};\nexport const addPost = () =>\n    ({\n        type: ADD_POST,\n    } as const);\nexport const updateNewPostText = (inputPostText: string) =>\n    ({\n        type: UPDATE_NEW_POST_TEXT,\n        inputPostText,\n    } as const);\n\nexport const setUserProfile = (userProfile: UserProfileType) => ({\n    type: SET_USER_PROFILE,\n    userProfile,\n} as const)","import {ActionTypes} from \"./redux-store\";\n\nexport type InitialDialoguesStateType = typeof initialDialoguesState;\n\nconst UPDATE_NEW_MESSAGE_TEXT = \"UPDATE-NEW-MESSAGE-TEXT\";\nconst SEND_MESSAGE = \"SEND-MESSAGE\";\n\nexport type DialogueItemType = {\n    id: number;\n    personName: string;\n};\nexport type MessageType = {\n    id: number;\n    messageText: string;\n};\n\ntype DialoguesInitialStateType = typeof initialDialoguesState;\ntype DialoguesReducerActionTypes =\n    | ReturnType<typeof updateNewMessageText>\n    | ReturnType<typeof sendMessage>;\n\nconst initialDialoguesState = {\n    dialogues: [\n        {id: 1, personName: \"1111\"},\n        {id: 2, personName: \"2222\"},\n        {id: 3, personName: \"3333\"},\n        {id: 4, personName: \"4444\"},\n        {id: 5, personName: \"5555\"},\n\n    ] as DialogueItemType[],\n    messages: [\n        {id: 1, messageText: \"Hi-Hi-Hi!!!!!!\"},\n        {id: 2, messageText: \"Go to sleep, pls))))).\"},\n        {id: 3, messageText: \"I Love You!!)))\"},\n        {id: 4, messageText: \"Why.....&\"},\n        {id: 5, messageText: \"$500/month is not enough... We can do better!!!!\"},\n\n    ] as MessageType[],\n    newMessageText: \"\",\n};\nexport const dialoguesReducer = (\n    state: DialoguesInitialStateType = initialDialoguesState,\n    action: DialoguesReducerActionTypes\n): DialoguesInitialStateType => {\n\n\n    switch (action.type) {\n        case UPDATE_NEW_MESSAGE_TEXT:\n            return {\n                ...state,\n                newMessageText: action.inputMessageText\n            }\n\n        case SEND_MESSAGE:\n            return {\n                ...state,\n                newMessageText: \"\",\n                messages: [...state.messages, {id: 6, messageText: state.newMessageText}]\n            }\n\n        default:\n            return state;\n    }\n};\n\nexport const updateNewMessageText = (inputMessageText: string) =>\n    ({\n        type: UPDATE_NEW_MESSAGE_TEXT,\n        inputMessageText,\n    } as const);\nexport const sendMessage = () =>\n    ({\n        type: SEND_MESSAGE,\n    } as const);\n","export type InitialUsersStateType = typeof initialUsersState;\ntype UsersReducerActionTypes =\n    | ReturnType<typeof follow>\n    | ReturnType<typeof unfollow>\n    | ReturnType<typeof setUsers>\n    | ReturnType<typeof setCurrentPage>\n    | ReturnType<typeof setTotalUsersCount>\n    | ReturnType<typeof toggleIsFetching>\n    | ReturnType<typeof toggleFollowingProgress>;\n\nconst FOLLOW = \"FOLLOW\";\nconst UNFOLLOW = \"UNFOLLOW\";\nconst SET_USERS = 'SET-USERS';\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE'\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT'\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING'\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS'\n\nexport type UserType = {\n    id: number,\n    name: string,\n    status: string,\n    followed: boolean,\n    photos: PhotosType,\n}\n\ntype PhotosType = {\n    small: string,\n    large: string,\n}\nconst initialUsersState = {\n    users: [] as UserType[],\n    pageSize: 50,\n    totalUsersCount: 0,\n    currentPage: 1,\n    isFetching: true,\n    followingInProgress: [] as Array<number>\n};\n\nexport const usersReducer = (\n    state: InitialUsersStateType = initialUsersState,\n    action: UsersReducerActionTypes) => {\n    switch (action.type) {\n        case FOLLOW:\n            return {\n                ...state,\n                users: state.users.map(u => u.id === action.userId ? {...u, followed: true} : u)\n            }\n        case UNFOLLOW:\n            return {\n                ...state,\n                users: state.users.map(u => u.id === action.userId ? {...u, followed: false} : u)\n            }\n        case SET_USERS:\n            return {...state, users: [...action.users]}\n\n        case \"SET_CURRENT_PAGE\":\n            return {\n                ...state, currentPage: action.currentPage\n            }\n        case \"SET_TOTAL_USERS_COUNT\":\n            return {\n                ...state, totalUsersCount: action.totalUsersCount\n            }\n        case 'TOGGLE_IS_FETCHING':\n            return {...state, isFetching: action.isFetching}\n\n        case 'TOGGLE_IS_FOLLOWING_PROGRESS':\n            return {\n                ...state,\n                followingInProgress: action.followingInProgress\n                    ? [...state.followingInProgress, action.userId]\n                    : state.followingInProgress.filter(id => id !== action.userId)\n            }\n\n        default:\n            return state;\n    }\n};\n\nexport const follow = (userId: number) => ({type: FOLLOW, userId} as const);\nexport const unfollow = (userId: number) => ({type: UNFOLLOW, userId} as const);\nexport const setUsers = (users: UserType[]) => ({type: SET_USERS, users} as const);\nexport const setCurrentPage = (currentPage: number) => ({type: SET_CURRENT_PAGE, currentPage} as const);\nexport const setTotalUsersCount = (totalUsersCount: number) => ({\n    type: SET_TOTAL_USERS_COUNT,\n    totalUsersCount\n} as const);\nexport const toggleIsFetching = (isFetching: boolean) => ({type: TOGGLE_IS_FETCHING, isFetching} as const);\nexport const toggleFollowingProgress = (userId: number, followingInProgress: boolean) => ({\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\n    userId,\n    followingInProgress\n} as const);\n\n","\nexport type InitialUsersStateType = typeof initialAuthUserState;\nexport type AuthReducerActionTypes =\n    | ReturnType<typeof setAuthUserData>\nconst SET_USER_DATA = 'SET-USER-DATA';\n\nexport type AuthType = {\n    id: number | null;\n    login: string | null;\n    email: string | null;\n    isAuth: boolean;\n};\n\nconst initialAuthUserState = {\n    id: null,\n    email: null,\n    login: null,\n    isAuth: false,\n} as AuthType;\n\nexport const authReducer = (\n    state: InitialUsersStateType = initialAuthUserState,\n    action: AuthReducerActionTypes) => {\n    switch (action.type) {\n        case SET_USER_DATA:\n            return {\n                ...state,\n               ...action.data,\n                isAuth: true\n            }\n\n        default:\n            return state;\n    }\n};\n\nexport const setAuthUserData = (initialAuthUserState: InitialUsersStateType) => ({type: SET_USER_DATA, data: initialAuthUserState} as const);\nexport default authReducer;\n","import {combineReducers, createStore} from \"redux\";\nimport {\n    profileReducer,\n    addPost,\n    updateNewPostText, setUserProfile,\n} from \"./profileReducer\";\nimport {\n    dialoguesReducer,\n    sendMessage,\n    updateNewMessageText,\n} from \"./dialoguesReducer\";\nimport {\n    follow, setCurrentPage, setTotalUsersCount, setUsers, toggleIsFetching, unfollow,\n    usersReducer\n} from \"./usersReducer\";\nimport authReducer from \"./authReducer\";\n// IMPORTS\n\nexport type ReduxRootStateType = ReturnType<typeof reduxReducers>;\nexport type ReduxStoreType = typeof reduxStore;\n\nexport type ActionTypes =\n    | ReturnType<typeof addPost>\n    | ReturnType<typeof updateNewPostText>\n    | ReturnType<typeof updateNewMessageText>\n    | ReturnType<typeof sendMessage>\n    | ReturnType<typeof follow>\n    | ReturnType<typeof unfollow>\n    | ReturnType<typeof setUsers>\n    | ReturnType<typeof setCurrentPage>\n    | ReturnType<typeof setTotalUsersCount>\n    | ReturnType<typeof toggleIsFetching>\n    | ReturnType<typeof setUserProfile>\n// TYPES\n\nexport const reduxReducers = combineReducers({\n    profilePage: profileReducer,\n    dialoguesPage: dialoguesReducer,\n    usersPage: usersReducer,\n    auth: authReducer,\n\n}); // combineReducers() - Redux function which combines all reduxReducers; accepts object with STORE BRANCH: BRANCH REDUCER key-value pairs\n\nexport const reduxStore = createStore(reduxReducers); // createStore() - Redux function to create reduxStore; accepts return value of combineReducers() as its input --> createStore() creates state object, whose .reduxStore has properties set as keys inside of combineReducers() inputs\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport s from \"./Navbar.module.css\";\n\nexport const Navbar = () => {\n  return (\n    <nav className={s.nav}>\n      <div className={s.item}>\n        <NavLink to={\"/profile\"} activeClassName={s.active}>\n          Profile\n        </NavLink>\n      </div>\n      <div className={s.item}>\n        <NavLink to={\"/dialogues\"} activeClassName={s.active}>\n          Dialogues\n        </NavLink>\n      </div>\n        <div className={s.item}>\n            <NavLink to={\"/users\"} activeClassName={s.active}>\n                Users\n            </NavLink>\n        </div>\n      <div className={s.item}>\n        <NavLink to={\"/news\"} activeClassName={s.active}>\n          News\n        </NavLink>\n      </div>\n      <div className={s.item}>\n        <NavLink to={\"/music\"} activeClassName={s.active}>\n          Music\n        </NavLink>\n      </div>\n      <div className={s.item}>\n        <NavLink to={\"/settings\"} activeClassName={s.active}>\n          Settings\n        </NavLink>\n      </div>\n    </nav>\n  );\n};\n","import React from \"react\";\nimport classes from \"./DialogueItem.module.css\";\nimport { NavLink } from \"react-router-dom\";\n\nexport type DialogueItemPropsType = {\n  id: number;\n  personName: string;\n};\n\nexport const DialogueItem = (props: DialogueItemPropsType) => {\n  const path = `/dialogues/${props.id}`;\n  return (\n    <div className={classes.dialogue}>\n      <NavLink to={path}>{props.personName}</NavLink>\n    </div>\n  );\n};\n","import React from \"react\";\nimport s from \"./Message.module.css\";\n\nexport type MessagePropsType = {\n  id: number;\n  messageText: string;\n};\n\nexport const Message = (props: MessagePropsType) => {\n  return <div className={s.message}>{props.messageText}</div>;\n};\n","import React from \"react\";\nimport {\n    DialogueItemType, MessageType, sendMessage, updateNewMessageText\n} from \"../../redux/dialoguesReducer\";\nimport {Dialogues} from \"./Dialogues\";\nimport {connect} from \"react-redux\";\nimport {ReduxRootStateType} from \"../../redux/redux-store\";\n\ntype MapStatePropsType = {\n    messages: Array<MessageType>;\n    dialogues: Array<DialogueItemType>;\n    newMessageText: string;\n};\ntype MapDispatchPropsType = {\n    updateNewMessageText: (newMessageText: string) => void;\n    sendMessage: () => void;\n};\nexport type DialoguesPropsType = MapStatePropsType & MapDispatchPropsType;\n\nconst mapStateToProps = (state: ReduxRootStateType): MapStatePropsType => {\n    return {\n        messages: state.dialoguesPage.messages,\n        dialogues: state.dialoguesPage.dialogues,\n        newMessageText: state.dialoguesPage.newMessageText\n    }\n}\n\nexport const DialoguesContainer = connect(mapStateToProps, {\n    updateNewMessageText, sendMessage})(Dialogues)\n","import React, { ChangeEvent } from \"react\";\nimport s from \"./Dialogues.module.css\";\nimport {\n  DialogueItem,\n  DialogueItemPropsType as DialogueItemType,\n} from \"./DialogueItem/DialogueItem\";\nimport { Message, MessagePropsType as MessageType } from \"./Message/Message\";\n\ntype DialoguesPropsType = {\n  messages: Array<MessageType>;\n  dialogues: Array<DialogueItemType>;\n  newMessageText: string;\n  updateNewMessageText: (newMessageText: string) => void;\n  sendMessage: () => void;\n};\n\nexport const Dialogues = (props: DialoguesPropsType) => {\n  const dialogueElements = props.dialogues.map((dialogue) => (\n    <DialogueItem personName={dialogue.personName} id={dialogue.id} />\n  ));\n  const messageElements = props.messages.map((message) => (\n    <Message messageText={message.messageText} id={message.id} />\n  ));\n\n  const onMessageChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\n    props.updateNewMessageText(event.currentTarget.value);\n  };\n\n  const onMessageSending = () => {\n    props.sendMessage();\n  };\n\n  return (\n    <div className={s.dialoguesPage}>\n      <div className={s.dialoguesList}>{dialogueElements}</div>\n      <div className={s.messagesList}>\n        <div>{messageElements}</div>\n        <div>\n          <div>\n            <textarea\n              value={props.newMessageText}\n              onChange={onMessageChange}\n              placeholder={\"Enter your message\"}\n            />\n          </div>\n          <div>\n            <button onClick={onMessageSending}>Send</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/user.cb9d7bb0.png\";","import React from \"react\";\r\nimport s from \"./users.module.css\";\r\nimport user from \"../../assets/images/user.png\";\r\nimport {UserType} from \"../../redux/usersReducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\nexport type UsersPropsType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    users: Array<UserType>,\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    followingInProgress: Array<number>\r\n    toggleFollowingProgress: (userId: number, followingInProgress: boolean) => void\r\n}\r\n\r\nexport const Users = (props: UsersPropsType) => {\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize)\r\n    let pages: Array<number> = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                {pages.map(p => {\r\n                    return <span className={props.currentPage === p ? s.selectedPage : s.page}\r\n                                 onClick={(e) => {\r\n                                     props.onPageChanged(p)\r\n                                 }}> {p} </span>\r\n                })}\r\n            </div>\r\n            {\r\n                props.users.map(u => <div key={u.id}>\r\n                    <span>\r\n                        <div>\r\n                            <NavLink to={`/profile/${u.id}`}>\r\n                                <img className={s.avatar} src={u.photos.small ? u.photos.small : user}/>\r\n                            </NavLink>\r\n\r\n                        </div>\r\n                        <div>\r\n                            {u.followed ?\r\n                                <button\r\n                                    disabled={props.followingInProgress.some(id => id === u.id)}\r\n                                    onClick={() => {\r\n                                        props.toggleFollowingProgress(u.id, true)\r\n                                        axios\r\n                                            .delete(\r\n                                                `https://social-network.samuraijs.com/api/1.0/follow/${u.id}`,\r\n                                                {\r\n                                                    withCredentials: true,\r\n                                                    headers: {\r\n                                                        \"API-KEY\": \"c8be0b36-3ac5-42a7-89ea-e79ef5d95007\"\r\n                                                    }\r\n                                                })\r\n                                            .then(promise => {\r\n                                                if (promise.data.resultCode === 0) {\r\n                                                    props.unfollow(u.id)\r\n                                                }\r\n                                                props.toggleFollowingProgress(u.id, false)\r\n                                            })\r\n                                    }}>Unfollow</button> :\r\n\r\n                                <button disabled={props.followingInProgress.some(id => id === u.id)}\r\n                                        onClick={() => {\r\n                                            props.toggleFollowingProgress(u.id, true)\r\n                                            axios\r\n                                                .post(\r\n                                                    `https://social-network.samuraijs.com/api/1.0/follow/${u.id}`,\r\n                                                    {},\r\n                                                    {\r\n                                                        withCredentials: true,\r\n                                                        headers: {\r\n                                                            \"API-KEY\": \"c8be0b36-3ac5-42a7-89ea-e79ef5d95007\"\r\n                                                        }\r\n                                                    })\r\n                                                .then(promise => {\r\n                                                    if (promise.data.resultCode === 0) {\r\n                                                        props.follow(u.id)\r\n                                                    }\r\n                                                    props.toggleFollowingProgress(u.id, false)\r\n                                                })\r\n                                        }}>Follow</button>}\r\n\r\n                        </div>\r\n                    </span>\r\n                    <span>\r\n                        <div>{u.name}</div>\r\n                        <div>{u.status}</div>\r\n                    </span>\r\n                </div>)\r\n            }\r\n        </div>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/loadingBook.b98a8c76.svg\";","import preloader from \"../../../assets/images/loadingBook.svg\";\r\nimport React from \"react\";\r\n\r\nexport const Preloader = () => {\r\n    return(\r\n        <div>\r\n            <img src={preloader} alt={'Loading'}/>\r\n        </div>\r\n    )\r\n}","import axios from \"axios\";\r\nimport {follow, unfollow} from \"../redux/usersReducer\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": \"c8be0b36-3ac5-42a7-89ea-e79ef5d95007\"\r\n    }\r\n})\r\n\r\nexport const usersAPI = {\r\n    gerUsers: (currentPage: any, pageSize: any) => {\r\n        return instance\r\n            .get( `users?page=${currentPage}&count=${pageSize}`)\r\n            .then(promise => promise.data)\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const unfollowUser = (id: any) => {\r\n    return instance\r\n        .delete(`follow/${id}`)\r\n        .then(promise => {\r\n            if (promise.data.resultCode === 0) {\r\n                unfollow(id)\r\n            }\r\n        })\r\n}\r\n\r\nexport const followUser = (id: any) => {\r\n    return instance\r\n        .post(\r\n            `follow/${id}`,\r\n            {})\r\n        .then(promise => {\r\n            if (promise.data.resultCode === 0) {\r\n                follow(id)\r\n            }\r\n        })\r\n}","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {ReduxRootStateType} from \"../../redux/redux-store\";\r\nimport {Users} from \"./Users\";\r\nimport {Preloader} from \"../common/Preloader/Preloader\";\r\nimport {\r\n    follow,\r\n    setCurrentPage,\r\n    setTotalUsersCount,\r\n    setUsers, toggleFollowingProgress,\r\n    toggleIsFetching,\r\n    unfollow,\r\n    UserType\r\n} from \"../../redux/usersReducer\";\r\nimport {usersAPI} from \"../../api/api\";\r\n\r\ntype MapStatePropsType = {\r\n    users: Array<UserType>,\r\n    pageSize: number,\r\n    totalUsersCount: number,\r\n    currentPage: number,\r\n    isFetching: boolean,\r\n    followingInProgress: Array<number>,\r\n};\r\ntype MapDispatchPropsType = {\r\n    follow: (userID: number) => void;\r\n    unfollow: (userID: number) => void;\r\n    setUsers: (users: Array<UserType>) => void;\r\n    setCurrentPage: (currentPage: number) => void\r\n    setTotalUsersCount: (totalCount: number) => void\r\n    toggleIsFetching: (isFething: boolean) => void\r\n    toggleFollowingProgress: (userId: number, followingInProgress: boolean) => void\r\n};\r\n\r\nexport type UsersClassContainerPropsType = MapStatePropsType & MapDispatchPropsType;\r\n\r\nexport class UsersContainer extends React.Component <\r\n    UsersClassContainerPropsType,\r\n    Array<UserType>\r\n    > {\r\n    componentDidMount() {\r\n        this.props.toggleIsFetching(true)\r\n        usersAPI\r\n            .gerUsers(this.props.currentPage, this.props.pageSize)\r\n            .then(data => {\r\n                this.props.toggleIsFetching(false)\r\n                this.props.setUsers(data.items);\r\n                this.props.setTotalUsersCount(data.totalCount);\r\n            });\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.setCurrentPage(pageNumber);\r\n        this.props.toggleIsFetching(true)\r\n\r\n        usersAPI.gerUsers(pageNumber, this.props.pageSize)\r\n            .then(data => {\r\n                this.props.toggleIsFetching(false)\r\n                this.props.setUsers(data.items);\r\n            })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.props.isFetching ? <Preloader/> : null}\r\n                <Users totalUsersCount={this.props.totalUsersCount}\r\n                       pageSize={this.props.pageSize}\r\n                       currentPage={this.props.currentPage}\r\n                       onPageChanged={this.onPageChanged}\r\n                       users={this.props.users}\r\n                       follow={this.props.follow}\r\n                       unfollow={this.props.unfollow}\r\n                       toggleFollowingProgress={this.props.toggleFollowingProgress}\r\n                       followingInProgress={this.props.followingInProgress}\r\n                />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: ReduxRootStateType) => {\r\n    // @ts-ignore\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n        followingInProgress: state.usersPage.followingInProgress\r\n    }\r\n}\r\n\r\n// @ts-ignore\r\nexport default connect(mapStateToProps, {\r\n    follow,\r\n    unfollow,\r\n    setUsers,\r\n    setCurrentPage,\r\n    setTotalUsersCount,\r\n    toggleIsFetching,\r\n    toggleFollowingProgress,\r\n})(UsersContainer)","import React from \"react\";\nimport s from \"./ProfileInfo.module.css\";\nimport { ProfilePropsType as ProfileInfoPropsType } from \"../Profile\";\nimport {Preloader} from \"../../common/Preloader/Preloader\";\n\nexport const ProfileInfo = (props: ProfileInfoPropsType) => {\n    if(!props.userProfile.userId) {\n        return <Preloader/>\n    } else\n  return (\n    <div>\n      <div>\n        <img className={s.image}\n          src={\"https://images.ctfassets.net/hrltx12pl8hq/7yQR5uJhwEkRfjwMFJ7bUK/dc52a0913e8ff8b5c276177890eb0129/offset_comp_772626-opt.jpg?fit=fill&w=800&h=300\"}\n          alt={\"background\"}\n        />\n      </div>\n      <div className={s.descriptionBlock}>\n          Ava + description</div>\n        {/*<img src={props.userProfile.photos.large} />*/}\n    </div>\n  );\n};\n","import React from \"react\";\nimport s from \"./Post.module.css\";\n\nexport type PostPropsType = {\n  id: number;\n  postText: string;\n  likesCount: number;\n};\n\nexport const Post = (props: PostPropsType) => {\n  return (\n    <div className={s.item}>\n      <img\n          src={\n              \"https://png.pngtree.com/png-clipart/20190920/original/pngtree-happy-fox-avatar-illustration-png-image_4677278.jpg\"\n          }\n\n          alt={\"person photo\"}\n      />\n      {props.postText}\n      <div>\n        <span>{props.likesCount}</span>\n      </div>\n    </div>\n  );\n};\n","import React from \"redux\";\nimport {addPost, InitialProfileStateType, updateNewPostText} from \"../../../redux/profileReducer\";\nimport {MyPosts} from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {ReduxRootStateType} from \"../../../redux/redux-store\";\n\nconst mapStateToProps = (state: ReduxRootStateType): InitialProfileStateType => {\n    return {\n        posts: state.profilePage.posts,\n        newPostText: state.profilePage.newPostText,\n        userProfile: state.profilePage.userProfile\n    }\n}\n\nexport const MyPostsContainer = connect(mapStateToProps, {\n    updateNewPostText,\n    addPost,\n})(MyPosts)\n","import React, { ChangeEvent } from \"react\";\nimport s from \"./MyPosts.module.css\";\nimport { Post, PostPropsType as PostType } from \"./Post/Post\";\n\ntype MyPostsPropsType = {\n  posts: Array<PostType>;\n  newPostText: string;\n  updateNewPostText: (inputPostText: string) => void;\n  addPost: () => void;\n};\n\nexport const MyPosts = (props: MyPostsPropsType) => {\n  const postsElements = props.posts.map((post) => (\n    <Post postText={post.postText} likesCount={post.likesCount} id={post.id} />\n  ));\n\n  const onPostAdding = () => {\n    props.addPost();\n  };\n\n  const onPostChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\n    props.updateNewPostText(event.currentTarget.value);\n  };\n\n  return (\n    <div className={s.postsBlock}>\n      <h3>My posts</h3>\n      <div>\n        <div>\n          <textarea value={props.newPostText} onChange={onPostChange} />\n        </div>\n        <div>\n          <button onClick={onPostAdding}>Add post</button>\n        </div>\n      </div>\n      <div className={s.posts}>{postsElements}</div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { ProfileInfo } from \"./ProfileInfo/ProfileInfo\";\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\nimport {UserProfileType} from \"../../redux/profileReducer\";\n\nexport type ProfilePropsType = {\n    userProfile: UserProfileType;\n};\n\nexport const Profile = (props: ProfilePropsType) => {\n  return (\n    <div>\n      <ProfileInfo userProfile={props.userProfile}/>\n      <MyPostsContainer />\n    </div>\n  );\n};\n","import React from \"react\";\nimport {Profile} from \"./Profile\";\nimport axios from \"axios\";\nimport {connect} from \"react-redux\";\nimport {setUserProfile, UserProfileType} from \"../../redux/profileReducer\";\nimport {ReduxRootStateType} from \"../../redux/redux-store\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\n\n\ntype MapStatePropsType = {\n    userProfile: UserProfileType;\n};\ntype MapDispatchPropsType = {\n    setUserProfile: (userProfile: UserProfileType) => void;\n};\ntype ProfileClassContainerPropsType = MapStatePropsType & MapDispatchPropsType;\ntype ProfilePathParamsType = {\n    userID: string;\n};\ntype ProfileClassContainerURLPropsType = RouteComponentProps<ProfilePathParamsType> &\n    ProfileClassContainerPropsType;\n\n\nclass ProfileClassContainer extends React.Component<\n    ProfileClassContainerURLPropsType,\n    UserProfileType>{\n\n    componentDidMount() {\n        let userID = this.props.match.params.userID;\n        if (!userID) {\n            userID = \"2\";\n        }\n        axios\n            .get(`https://social-network.samuraijs.com/api/1.0/profile/${userID}`)\n            .then((promise) => {\n                this.props.setUserProfile(promise.data);\n            });\n    }\n    render = () => {\n        return (\n            <div>\n                <Profile {...this.props} userProfile={this.props.userProfile}/>\n            </div>\n        );\n    };\n    }\n\nconst ProfileURLContainer = withRouter(ProfileClassContainer);\nlet mapStateToProps = (state: ReduxRootStateType): MapStatePropsType => ({\n    userProfile: state.profilePage.userProfile,\n})\n\nexport const ProfileContainer =  connect(mapStateToProps,{setUserProfile} )(\n    ProfileURLContainer)","import React from \"react\";\nimport s from \"./Header.module.css\";\nimport { NavLink } from \"react-router-dom\";\nimport {AuthType, InitialUsersStateType} from \"../../redux/authReducer\";\n\ntype HeaderPropsType = {\n    isAuth: boolean;\n    login: string | null;\n    setAuthUserData: (data: AuthType) => void;\n};\n\nexport const Header = (props:HeaderPropsType ) => {\n  return (\n    <header className={s.header}>\n      <img\n        src={\"https://cdn.logo.com/hotlink-ok/logo-social-sq.png\"}\n        alt={\"Logo\"}\n      />\n        <div className={s.loginBlock}>\n            {props.isAuth? props.login\n            :<NavLink to={'/login'}>Login</NavLink> }\n\n        </div>\n    </header>\n  );\n};\n","import React from \"react\";\nimport {Header} from \"./Header\";\nimport axios from \"axios\";\nimport {connect} from \"react-redux\";\nimport {AuthType, setAuthUserData} from \"../../redux/authReducer\";\nimport {ReduxRootStateType} from \"../../redux/redux-store\";\n\ntype MapStatePropsType = {\n    isAuth: boolean,\n    login: string | null,\n};\ntype MapDispatchPropsType = {\n    setAuthUserData: (data: AuthType) => void\n};\n\ntype HeaderClassContainerPropsType = MapStatePropsType & MapDispatchPropsType;\n\nexport class HeaderClassContainer extends React.Component<HeaderClassContainerPropsType> {\n    componentDidMount() {\n        axios\n            .get(`https://social-network.samuraijs.com/api/1.0/auth/me`, {\n                withCredentials: true\n            })\n            .then(promise => {\n               if(promise.data.resultCode === 0) {\n                   this.props.setAuthUserData(promise.data.data)\n               }\n            });\n    }\n    render = () => {\n        return <Header {...this.props}/>\n    }\n}\nconst mapStateToProps = (state: ReduxRootStateType):MapStatePropsType  => ({\n    isAuth: state.auth.isAuth,\n    login: state.auth.login,\n})\nexport const HeaderContainer = connect(mapStateToProps, {setAuthUserData}) (\n    HeaderClassContainer);\n","import React from \"react\";\nimport { Route } from \"react-router-dom\";\nimport s from \"./App.module.css\";\nimport { Navbar } from \"./components/Navbar/Navbar\";\nimport {DialoguesContainer} from \"./components/Dialogues/DialoguesContainer\";\nimport UsersContainer from \"./components/Users/UsersContainer\";\nimport {ProfileContainer} from \"./components/Profile/ProfileContainer\";\nimport {HeaderContainer} from \"./components/Header/HeaderContainer\";\n\n\n\n\nexport function App() {\n  return (\n    <div className={s.appWrapper}>\n      <HeaderContainer />\n      <Navbar />\n      <div className={s.appWrapperContent}>\n          <Route path={\"/profile/:userID?\"} render={() => <ProfileContainer />} />\n        <Route path={\"/dialogues\"} render={() => <DialoguesContainer />} />\n          <Route path={\"/users\"} render={() => <UsersContainer/>} />\n\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./index.css\";\nimport { reduxStore } from \"./redux/redux-store\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\n\n\n\n  ReactDOM.render(\n    <BrowserRouter>\n      <Provider store={reduxStore}>\n        <App />\n      </Provider>\n    </BrowserRouter>,\n    document.getElementById(\"root\"));\n\n\n\n"],"sourceRoot":""}