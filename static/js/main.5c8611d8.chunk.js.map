{"version":3,"sources":["components/Dialogues/Dialogues.module.css","components/Users/users.module.css","App.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Header/Header.module.css","components/Dialogues/DialogueItem/DialogueItem.module.css","components/Dialogues/Message/Message.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Navbar/Navbar.module.css","redux/profileReducer.ts","redux/dialoguesReducer.ts","redux/usersReducer.ts","redux/authReducer.ts","redux/redux-store.ts","components/Navbar/Navbar.tsx","components/Dialogues/DialogueItem/DialogueItem.tsx","components/Dialogues/Message/Message.tsx","components/Dialogues/DialoguesContainer.tsx","components/Dialogues/Dialogues.tsx","assets/images/user.png","components/Users/Users.tsx","assets/images/loadingBook.svg","components/common/Preloader/Preloader.tsx","components/Users/UsersContainer.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","App.tsx","index.tsx"],"names":["module","exports","ADD_POST","UPDATE_NEW_POST_TEXT","SET_USER_PROFILE","initialProfileState","posts","newPostText","userProfile","UPDATE_NEW_MESSAGE_TEXT","SEND_MESSAGE","initialDialoguesState","dialogues","id","personName","messages","messageText","newMessageText","FOLLOW","UNFOLLOW","SET_USERS","initialUsersState","users","pageSize","totalUsersCount","currentPage","isFetching","SET_USER_DATA","initialAuthUserState","email","login","isAuth","authReducer","state","action","type","data","reduxReducers","combineReducers","profilePage","newPost","postText","likesCount","inputPostText","dialoguesPage","inputMessageText","usersPage","map","u","userId","followed","auth","reduxStore","createStore","Navbar","className","s","nav","item","to","activeClassName","active","DialogueItem","props","path","classes","dialogue","Message","message","DialoguesContainer","connect","updateNewMessageText","sendMessage","dialogueElements","messageElements","dialoguesList","messagesList","value","onChange","event","currentTarget","placeholder","onClick","Users","pagesCount","Math","ceil","pages","i","push","p","selectedPage","page","e","onPageChanged","avatar","src","photos","small","user","axios","delete","withCredentials","headers","then","promise","resultCode","unfollow","post","follow","name","status","Preloader","preloader","alt","UsersContainer","pageNumber","setCurrentPage","toggleIsFetching","get","setUsers","items","this","setTotalUsersCount","totalCount","React","Component","ProfileInfo","image","descriptionBlock","Post","MyPostsContainer","updateNewPostText","addPost","postsElements","postsBlock","Profile","ProfileClassContainer","render","userID","match","params","setUserProfile","ProfileURLContainer","withRouter","ProfileContainer","Header","header","loginBlock","HeaderClassContainer","setAuthUserData","HeaderContainer","App","appWrapper","appWrapperContent","ReactDOM","store","document","getElementById"],"mappings":"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","file":"static/js/main.5c8611d8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialoguesPage\":\"Dialogues_dialoguesPage__1gZ1M\",\"dialoguesList\":\"Dialogues_dialoguesList__xmogx\",\"active\":\"Dialogues_active__jc3c8\",\"messagesList\":\"Dialogues_messagesList__EVw8R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"users_avatar__2NBm8\",\"selectedPage\":\"users_selectedPage__2VY4r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appWrapper\":\"App_appWrapper__1N3As\",\"appWrapperContent\":\"App_appWrapperContent__1Rv3K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__mkR90\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2-bek\",\"posts\":\"MyPosts_posts__zQK6_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3vltG\",\"loginBlock\":\"Header_loginBlock__j78vF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogue\":\"DialogueItem_dialogue__28rWi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__3tJw3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1zOmz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__-FuZV\",\"item\":\"Navbar_item__2-lI7\",\"active\":\"Navbar_active__KiUqI\"};","\nexport type InitialProfileStateType = typeof initialProfileState;\ntype ProfileReducerActionTypes =\n    | ReturnType<typeof addPost>\n    | ReturnType<typeof updateNewPostText>\n    | ReturnType<typeof setUserProfile>;\n\nconst ADD_POST = \"ADD-POST\";\nconst UPDATE_NEW_POST_TEXT = \"UPDATE-NEW-POST-TEXT\";\nconst SET_USER_PROFILE = 'SET-USER-PROFILE'\nexport type PostType = {\n    id: number;\n    postText: string;\n    likesCount: number;\n};\ntype UserContactsType = {\n    github: string;\n    vk: string;\n    facebook: string;\n    instagram: string;\n    twitter: string;\n    website: string;\n    youtube: string;\n    mainLink: string;\n};\ntype PhotosType = {\n    small: string;\n    large: string;\n};\n\nexport type UserProfileType = {\n    aboutMe: string;\n    userId: number;\n    lookingForAJob: boolean;\n    lookingForAJobDescription: string;\n    fullName: string;\n    contacts: UserContactsType;\n    photos: PhotosType;\n};\n\nconst initialProfileState = {\n    posts: [] as PostType[],\n    newPostText: \"\",\n    userProfile: {} as UserProfileType,\n};\n\nexport const profileReducer = (\n    state: InitialProfileStateType = initialProfileState,\n    action: ProfileReducerActionTypes\n): InitialProfileStateType => {\n    switch (action.type) {\n        case ADD_POST:\n            const newPost = {\n                id: 4,\n                postText: state.newPostText,\n                likesCount: 0,\n            };\n            return {\n                ...state,\n                posts: [...state.posts, newPost],\n                newPostText: \"\",\n            };\n        case UPDATE_NEW_POST_TEXT:\n            return {\n                ...state,\n                newPostText: action.inputPostText,\n            };\n        case SET_USER_PROFILE: {\n            return {...state, userProfile: action.userProfile};\n        }\n\n        default:\n            return state;\n    }\n};\nexport const addPost = () =>\n    ({\n        type: ADD_POST,\n    } as const);\nexport const updateNewPostText = (inputPostText: string) =>\n    ({\n        type: UPDATE_NEW_POST_TEXT,\n        inputPostText,\n    } as const);\n\nexport const setUserProfile = (userProfile: UserProfileType) => ({\n    type: SET_USER_PROFILE,\n    userProfile,\n} as const)","import {ActionTypes} from \"./redux-store\";\n\nexport type InitialDialoguesStateType = typeof initialDialoguesState;\n\nconst UPDATE_NEW_MESSAGE_TEXT = \"UPDATE-NEW-MESSAGE-TEXT\";\nconst SEND_MESSAGE = \"SEND-MESSAGE\";\n\nexport type DialogueItemType = {\n    id: number;\n    personName: string;\n};\nexport type MessageType = {\n    id: number;\n    messageText: string;\n};\n\ntype DialoguesInitialStateType = typeof initialDialoguesState;\ntype DialoguesReducerActionTypes =\n    | ReturnType<typeof updateNewMessageText>\n    | ReturnType<typeof sendMessage>;\n\nconst initialDialoguesState = {\n    dialogues: [\n        {id: 1, personName: \"1111\"},\n        {id: 2, personName: \"2222\"},\n        {id: 3, personName: \"3333\"},\n        {id: 4, personName: \"4444\"},\n        {id: 5, personName: \"5555\"},\n\n    ] as DialogueItemType[],\n    messages: [\n        {id: 1, messageText: \"Hi-Hi-Hi!!!!!!\"},\n        {id: 2, messageText: \"Go to sleep, pls))))).\"},\n        {id: 3, messageText: \"I Love You!!)))\"},\n        {id: 4, messageText: \"Why.....&\"},\n        {id: 5, messageText: \"$500/month is not enough... We can do better!!!!\"},\n\n    ] as MessageType[],\n    newMessageText: \"\",\n};\nexport const dialoguesReducer = (\n    state: DialoguesInitialStateType = initialDialoguesState,\n    action: DialoguesReducerActionTypes\n): DialoguesInitialStateType => {\n\n\n    switch (action.type) {\n        case UPDATE_NEW_MESSAGE_TEXT:\n            return {\n                ...state,\n                newMessageText: action.inputMessageText\n            }\n\n        case SEND_MESSAGE:\n            return {\n                ...state,\n                newMessageText: \"\",\n                messages: [...state.messages, {id: 6, messageText: state.newMessageText}]\n            }\n\n        default:\n            return state;\n    }\n};\n\nexport const updateNewMessageText = (inputMessageText: string) =>\n    ({\n        type: UPDATE_NEW_MESSAGE_TEXT,\n        inputMessageText,\n    } as const);\nexport const sendMessage = () =>\n    ({\n        type: SEND_MESSAGE,\n    } as const);\n","\nexport type InitialUsersStateType = typeof initialUsersState;\ntype UsersReducerActionTypes =\n    | ReturnType<typeof follow>\n    | ReturnType<typeof unfollow>\n    | ReturnType<typeof setUsers>\n    | ReturnType<typeof setCurrentPage>\n    | ReturnType<typeof setTotalUsersCount>\n    | ReturnType<typeof toggleIsFetching>;\n\nconst FOLLOW = \"FOLLOW\";\nconst UNFOLLOW = \"UNFOLLOW\";\nconst SET_USERS = 'SET-USERS';\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE'\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT'\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING'\n\nexport type UserType = {\n    id: number,\n    name: string,\n    status: string,\n    followed: boolean,\n    photos: PhotosType,\n}\n\ntype PhotosType = {\n    small: string,\n    large: string,\n}\nconst initialUsersState = {\n    users: [] as UserType[],\n    pageSize: 50,\n    totalUsersCount: 0,\n    currentPage: 1,\n    isFetching: true,\n\n};\n\nexport const usersReducer = (\n    state: InitialUsersStateType = initialUsersState,\n    action: UsersReducerActionTypes) => {\n    switch (action.type) {\n        case FOLLOW:\n            return {\n                ...state,\n                users: state.users.map(u => u.id === action.userId ? {...u, followed: true} : u)\n            }\n        case UNFOLLOW:\n            return {\n                ...state,\n                users: state.users.map(u => u.id === action.userId ? {...u, followed: false} : u)\n            }\n        case SET_USERS:\n            return {...state, users: [...action.users]}\n\n        case \"SET_CURRENT_PAGE\":\n            return {\n                ...state, currentPage: action.currentPage\n            }\n        case \"SET_TOTAL_USERS_COUNT\":\n            return {\n                ...state, totalUsersCount: action.totalUsersCount\n            }\n        case 'TOGGLE_IS_FETCHING':\n            return{...state, isFetching: action.isFetching}\n\n        default:\n            return state;\n    }\n};\n\nexport const follow = (userId: number) => ({type: FOLLOW, userId} as const);\nexport const unfollow= (userId: number) => ({type: UNFOLLOW, userId} as const);\nexport const setUsers = (users: UserType[]) => ({type: SET_USERS, users} as const);\nexport const setCurrentPage = (currentPage: number) => ({type: SET_CURRENT_PAGE, currentPage} as const);\nexport const setTotalUsersCount = (totalUsersCount: number) => ({type: SET_TOTAL_USERS_COUNT, totalUsersCount} as const);\nexport const toggleIsFetching = (isFetching: boolean) => ({type: TOGGLE_IS_FETCHING, isFetching} as const);\n\n","\nexport type InitialUsersStateType = typeof initialAuthUserState;\nexport type AuthReducerActionTypes =\n    | ReturnType<typeof setAuthUserData>\nconst SET_USER_DATA = 'SET-USER-DATA';\n\nexport type AuthType = {\n    id: number | null;\n    login: string | null;\n    email: string | null;\n    isAuth: boolean;\n};\n\nconst initialAuthUserState = {\n    id: null,\n    email: null,\n    login: null,\n    isAuth: false,\n} as AuthType;\n\nexport const authReducer = (\n    state: InitialUsersStateType = initialAuthUserState,\n    action: AuthReducerActionTypes) => {\n    switch (action.type) {\n        case SET_USER_DATA:\n            return {\n                ...state,\n               ...action.data,\n                isAuth: true\n            }\n\n        default:\n            return state;\n    }\n};\n\nexport const setAuthUserData = (initialAuthUserState: InitialUsersStateType) => ({type: SET_USER_DATA, data: initialAuthUserState} as const);\nexport default authReducer;\n","import {combineReducers, createStore} from \"redux\";\nimport {\n    profileReducer,\n    addPost,\n    updateNewPostText, setUserProfile,\n} from \"./profileReducer\";\nimport {\n    dialoguesReducer,\n    sendMessage,\n    updateNewMessageText,\n} from \"./dialoguesReducer\";\nimport {\n    follow, setCurrentPage, setTotalUsersCount, setUsers, toggleIsFetching, unfollow,\n    usersReducer\n} from \"./usersReducer\";\nimport authReducer from \"./authReducer\";\n// IMPORTS\n\nexport type ReduxRootStateType = ReturnType<typeof reduxReducers>;\nexport type ReduxStoreType = typeof reduxStore;\n\nexport type ActionTypes =\n    | ReturnType<typeof addPost>\n    | ReturnType<typeof updateNewPostText>\n    | ReturnType<typeof updateNewMessageText>\n    | ReturnType<typeof sendMessage>\n    | ReturnType<typeof follow>\n    | ReturnType<typeof unfollow>\n    | ReturnType<typeof setUsers>\n    | ReturnType<typeof setCurrentPage>\n    | ReturnType<typeof setTotalUsersCount>\n    | ReturnType<typeof toggleIsFetching>\n    | ReturnType<typeof setUserProfile>\n// TYPES\n\nexport const reduxReducers = combineReducers({\n    profilePage: profileReducer,\n    dialoguesPage: dialoguesReducer,\n    usersPage: usersReducer,\n    auth: authReducer,\n\n}); // combineReducers() - Redux function which combines all reduxReducers; accepts object with STORE BRANCH: BRANCH REDUCER key-value pairs\n\nexport const reduxStore = createStore(reduxReducers); // createStore() - Redux function to create reduxStore; accepts return value of combineReducers() as its input --> createStore() creates state object, whose .reduxStore has properties set as keys inside of combineReducers() inputs\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport s from \"./Navbar.module.css\";\n\nexport const Navbar = () => {\n  return (\n    <nav className={s.nav}>\n      <div className={s.item}>\n        <NavLink to={\"/profile\"} activeClassName={s.active}>\n          Profile\n        </NavLink>\n      </div>\n      <div className={s.item}>\n        <NavLink to={\"/dialogues\"} activeClassName={s.active}>\n          Dialogues\n        </NavLink>\n      </div>\n        <div className={s.item}>\n            <NavLink to={\"/users\"} activeClassName={s.active}>\n                Users\n            </NavLink>\n        </div>\n      <div className={s.item}>\n        <NavLink to={\"/news\"} activeClassName={s.active}>\n          News\n        </NavLink>\n      </div>\n      <div className={s.item}>\n        <NavLink to={\"/music\"} activeClassName={s.active}>\n          Music\n        </NavLink>\n      </div>\n      <div className={s.item}>\n        <NavLink to={\"/settings\"} activeClassName={s.active}>\n          Settings\n        </NavLink>\n      </div>\n    </nav>\n  );\n};\n","import React from \"react\";\nimport classes from \"./DialogueItem.module.css\";\nimport { NavLink } from \"react-router-dom\";\n\nexport type DialogueItemPropsType = {\n  id: number;\n  personName: string;\n};\n\nexport const DialogueItem = (props: DialogueItemPropsType) => {\n  const path = `/dialogues/${props.id}`;\n  return (\n    <div className={classes.dialogue}>\n      <NavLink to={path}>{props.personName}</NavLink>\n    </div>\n  );\n};\n","import React from \"react\";\nimport s from \"./Message.module.css\";\n\nexport type MessagePropsType = {\n  id: number;\n  messageText: string;\n};\n\nexport const Message = (props: MessagePropsType) => {\n  return <div className={s.message}>{props.messageText}</div>;\n};\n","import React from \"react\";\nimport {\n    DialogueItemType, MessageType, sendMessage, updateNewMessageText\n} from \"../../redux/dialoguesReducer\";\nimport {Dialogues} from \"./Dialogues\";\nimport {connect} from \"react-redux\";\nimport {ReduxRootStateType} from \"../../redux/redux-store\";\n\ntype MapStatePropsType = {\n    messages: Array<MessageType>;\n    dialogues: Array<DialogueItemType>;\n    newMessageText: string;\n};\ntype MapDispatchPropsType = {\n    updateNewMessageText: (newMessageText: string) => void;\n    sendMessage: () => void;\n};\nexport type DialoguesPropsType = MapStatePropsType & MapDispatchPropsType;\n\nconst mapStateToProps = (state: ReduxRootStateType): MapStatePropsType => {\n    return {\n        messages: state.dialoguesPage.messages,\n        dialogues: state.dialoguesPage.dialogues,\n        newMessageText: state.dialoguesPage.newMessageText\n    }\n}\n\nexport const DialoguesContainer = connect(mapStateToProps, {\n    updateNewMessageText, sendMessage})(Dialogues)\n","import React, { ChangeEvent } from \"react\";\nimport s from \"./Dialogues.module.css\";\nimport {\n  DialogueItem,\n  DialogueItemPropsType as DialogueItemType,\n} from \"./DialogueItem/DialogueItem\";\nimport { Message, MessagePropsType as MessageType } from \"./Message/Message\";\n\ntype DialoguesPropsType = {\n  messages: Array<MessageType>;\n  dialogues: Array<DialogueItemType>;\n  newMessageText: string;\n  updateNewMessageText: (newMessageText: string) => void;\n  sendMessage: () => void;\n};\n\nexport const Dialogues = (props: DialoguesPropsType) => {\n  const dialogueElements = props.dialogues.map((dialogue) => (\n    <DialogueItem personName={dialogue.personName} id={dialogue.id} />\n  ));\n  const messageElements = props.messages.map((message) => (\n    <Message messageText={message.messageText} id={message.id} />\n  ));\n\n  const onMessageChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\n    props.updateNewMessageText(event.currentTarget.value);\n  };\n\n  const onMessageSending = () => {\n    props.sendMessage();\n  };\n\n  return (\n    <div className={s.dialoguesPage}>\n      <div className={s.dialoguesList}>{dialogueElements}</div>\n      <div className={s.messagesList}>\n        <div>{messageElements}</div>\n        <div>\n          <div>\n            <textarea\n              value={props.newMessageText}\n              onChange={onMessageChange}\n              placeholder={\"Enter your message\"}\n            />\n          </div>\n          <div>\n            <button onClick={onMessageSending}>Send</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/user.cb9d7bb0.png\";","import React from \"react\";\r\nimport s from \"./users.module.css\";\r\nimport user from \"../../assets/images/user.png\";\r\nimport {UserType} from \"../../redux/usersReducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\nexport type UsersPropsType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    users: Array<UserType>,\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n}\r\n\r\nexport const Users = (props: UsersPropsType) => {\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize)\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                {pages.map(p => {\r\n                    return <span className={props.currentPage === p ? s.selectedPage : s.page}\r\n                                 onClick={(e) => {\r\n                                     props.onPageChanged(p)\r\n                                 }}> {p} </span>\r\n                })}\r\n            </div>\r\n            {\r\n                props.users.map(u => <div key={u.id}>\r\n                    <span>\r\n                        <div>\r\n                            <NavLink to={`/profile/${u.id}`}>\r\n                                <img className={s.avatar} src={u.photos.small ? u.photos.small : user}/>\r\n                            </NavLink>\r\n\r\n                        </div>\r\n                        <div>\r\n                            {u.followed ?\r\n                                <button onClick={() => {\r\n                                    axios\r\n                                        .delete(\r\n                                            `https://social-network.samuraijs.com/api/1.0/follow/${u.id}`,\r\n                                            {\r\n                                                withCredentials: true,\r\n                                                headers: {\r\n                                                    \"API-KEY\": \"624556bc-2429-44b0-abcc-055e502b56fb\"\r\n                                                }\r\n                                            })\r\n                                        .then(promise => {\r\n                                            if (promise.data.resultCode === 0) {\r\n                                                props.unfollow(u.id)\r\n                                            }\r\n                                        })\r\n                                }}>Unfollow</button> :\r\n\r\n                                <button onClick={() => {\r\n                                    axios\r\n                                        .post(\r\n                                            `https://social-network.samuraijs.com/api/1.0/follow/${u.id}`,\r\n                                            {},\r\n                                            {\r\n                                                withCredentials: true,\r\n                                                headers: {\r\n                                                    \"API-KEY\": \"624556bc-2429-44b0-abcc-055e502b56fb\"\r\n                                                }\r\n                                            })\r\n                                        .then(promise => {\r\n                                            if (promise.data.resultCode === 0) {\r\n                                                props.follow(u.id)\r\n                                            }\r\n                                        })\r\n                                }}>Follow</button>}\r\n\r\n                        </div>\r\n                    </span>\r\n                    <span>\r\n                        <div>{u.name}</div>\r\n                        <div>{u.status}</div>\r\n                    </span>\r\n                </div>)\r\n            }\r\n        </div>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/loadingBook.b98a8c76.svg\";","import preloader from \"../../../assets/images/loadingBook.svg\";\r\nimport React from \"react\";\r\n\r\nexport const Preloader = () => {\r\n    return(\r\n        <div>\r\n            <img src={preloader} alt={'Loading'}/>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {ReduxRootStateType} from \"../../redux/redux-store\";\r\nimport axios from \"axios\";\r\nimport {Users} from \"./Users\";\r\nimport {Preloader} from \"../common/Preloader/Preloader\";\r\nimport {\r\n    follow,\r\n    setCurrentPage,\r\n    setTotalUsersCount,\r\n    setUsers,\r\n    toggleIsFetching,\r\n    unfollow,\r\n    UserType\r\n} from \"../../redux/usersReducer\";\r\n\r\ntype MapStatePropsType = {\r\n    users: Array<UserType>,\r\n    pageSize: number,\r\n    totalUsersCount: number,\r\n    currentPage: number,\r\n    isFetching: boolean,\r\n};\r\ntype MapDispatchPropsType = {\r\n    follow: (userID: number) => void;\r\n    unfollow: (userID: number) => void;\r\n    setUsers: (users: Array<UserType>) => void;\r\n    setCurrentPage: (currentPage: number) => void\r\n    setTotalUsersCount: (totalCount: number) => void\r\n    toggleIsFetching: (isFething: boolean) => void\r\n};\r\n\r\nexport type UsersClassContainerPropsType = MapStatePropsType & MapDispatchPropsType;\r\n\r\nexport class UsersContainer extends React.Component <UsersClassContainerPropsType, Array<UserType>> {\r\n    componentDidMount() {\r\n        this.props.toggleIsFetching(true)\r\n        axios\r\n            .get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`, {\r\n                withCredentials: true,\r\n            })\r\n            .then(promise => {\r\n                this.props.toggleIsFetching(false)\r\n                this.props.setUsers(promise.data.items);\r\n                this.props.setTotalUsersCount(promise.data.totalCount);\r\n            });\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.setCurrentPage(pageNumber);\r\n        this.props.toggleIsFetching(true)\r\n        axios\r\n            .get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`, {\r\n                withCredentials: true,\r\n            })\r\n            .then(promise => {\r\n                this.props.toggleIsFetching(false)\r\n                this.props.setUsers(promise.data.items);\r\n            })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.props.isFetching ? <Preloader/> : null}\r\n                <Users totalUsersCount={this.props.totalUsersCount}\r\n                       pageSize={this.props.pageSize}\r\n                       currentPage={this.props.currentPage}\r\n                       onPageChanged={this.onPageChanged}\r\n                       users={this.props.users}\r\n                       follow={this.props.follow}\r\n                       unfollow={this.props.unfollow}\r\n                />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: ReduxRootStateType) => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,\r\n    {follow, unfollow, setUsers, setCurrentPage, setTotalUsersCount, toggleIsFetching,})(UsersContainer)","import React from \"react\";\nimport s from \"./ProfileInfo.module.css\";\nimport { ProfilePropsType as ProfileInfoPropsType } from \"../Profile\";\nimport {Preloader} from \"../../common/Preloader/Preloader\";\n\nexport const ProfileInfo = (props: ProfileInfoPropsType) => {\n    if(!props.userProfile.userId) {\n        return <Preloader/>\n    } else\n  return (\n    <div>\n      <div>\n        <img className={s.image}\n          src={\"https://images.ctfassets.net/hrltx12pl8hq/7yQR5uJhwEkRfjwMFJ7bUK/dc52a0913e8ff8b5c276177890eb0129/offset_comp_772626-opt.jpg?fit=fill&w=800&h=300\"}\n          alt={\"background\"}\n        />\n      </div>\n      <div className={s.descriptionBlock}>\n          Ava + description</div>\n        {/*<img src={props.userProfile.photos.large} />*/}\n    </div>\n  );\n};\n","import React from \"react\";\nimport s from \"./Post.module.css\";\n\nexport type PostPropsType = {\n  id: number;\n  postText: string;\n  likesCount: number;\n};\n\nexport const Post = (props: PostPropsType) => {\n  return (\n    <div className={s.item}>\n      <img\n          src={\n              \"https://png.pngtree.com/png-clipart/20190920/original/pngtree-happy-fox-avatar-illustration-png-image_4677278.jpg\"\n          }\n\n          alt={\"person photo\"}\n      />\n      {props.postText}\n      <div>\n        <span>{props.likesCount}</span>\n      </div>\n    </div>\n  );\n};\n","import React from \"redux\";\nimport {addPost, InitialProfileStateType, updateNewPostText} from \"../../../redux/profileReducer\";\nimport {MyPosts} from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {ReduxRootStateType} from \"../../../redux/redux-store\";\n\nconst mapStateToProps = (state: ReduxRootStateType): InitialProfileStateType => {\n    return {\n        posts: state.profilePage.posts,\n        newPostText: state.profilePage.newPostText,\n        userProfile: state.profilePage.userProfile\n    }\n}\n\nexport const MyPostsContainer = connect(mapStateToProps, {\n    updateNewPostText,\n    addPost,\n})(MyPosts)\n","import React, { ChangeEvent } from \"react\";\nimport s from \"./MyPosts.module.css\";\nimport { Post, PostPropsType as PostType } from \"./Post/Post\";\n\ntype MyPostsPropsType = {\n  posts: Array<PostType>;\n  newPostText: string;\n  updateNewPostText: (inputPostText: string) => void;\n  addPost: () => void;\n};\n\nexport const MyPosts = (props: MyPostsPropsType) => {\n  const postsElements = props.posts.map((post) => (\n    <Post postText={post.postText} likesCount={post.likesCount} id={post.id} />\n  ));\n\n  const onPostAdding = () => {\n    props.addPost();\n  };\n\n  const onPostChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\n    props.updateNewPostText(event.currentTarget.value);\n  };\n\n  return (\n    <div className={s.postsBlock}>\n      <h3>My posts</h3>\n      <div>\n        <div>\n          <textarea value={props.newPostText} onChange={onPostChange} />\n        </div>\n        <div>\n          <button onClick={onPostAdding}>Add post</button>\n        </div>\n      </div>\n      <div className={s.posts}>{postsElements}</div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { ProfileInfo } from \"./ProfileInfo/ProfileInfo\";\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\nimport {UserProfileType} from \"../../redux/profileReducer\";\n\nexport type ProfilePropsType = {\n    userProfile: UserProfileType;\n};\n\nexport const Profile = (props: ProfilePropsType) => {\n  return (\n    <div>\n      <ProfileInfo userProfile={props.userProfile}/>\n      <MyPostsContainer />\n    </div>\n  );\n};\n","import React from \"react\";\nimport {Profile} from \"./Profile\";\nimport axios from \"axios\";\nimport {connect} from \"react-redux\";\nimport {setUserProfile, UserProfileType} from \"../../redux/profileReducer\";\nimport {ReduxRootStateType} from \"../../redux/redux-store\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\n\n\ntype MapStatePropsType = {\n    userProfile: UserProfileType;\n};\ntype MapDispatchPropsType = {\n    setUserProfile: (userProfile: UserProfileType) => void;\n};\ntype ProfileClassContainerPropsType = MapStatePropsType & MapDispatchPropsType;\ntype ProfilePathParamsType = {\n    userID: string;\n};\ntype ProfileClassContainerURLPropsType = RouteComponentProps<ProfilePathParamsType> &\n    ProfileClassContainerPropsType;\n\n\nclass ProfileClassContainer extends React.Component<\n    ProfileClassContainerURLPropsType,\n    UserProfileType>{\n\n    componentDidMount() {\n        let userID = this.props.match.params.userID;\n        if (!userID) {\n            userID = \"2\";\n        }\n        axios\n            .get(`https://social-network.samuraijs.com/api/1.0/profile/${userID}`)\n            .then((promise) => {\n                this.props.setUserProfile(promise.data);\n            });\n    }\n    render = () => {\n        return (\n            <div>\n                <Profile {...this.props} userProfile={this.props.userProfile}/>\n            </div>\n        );\n    };\n    }\n\nconst ProfileURLContainer = withRouter(ProfileClassContainer);\nlet mapStateToProps = (state: ReduxRootStateType): MapStatePropsType => ({\n    userProfile: state.profilePage.userProfile,\n})\n\nexport const ProfileContainer =  connect(mapStateToProps,{setUserProfile} )(\n    ProfileURLContainer)","import React from \"react\";\nimport s from \"./Header.module.css\";\nimport { NavLink } from \"react-router-dom\";\nimport {AuthType, InitialUsersStateType} from \"../../redux/authReducer\";\n\ntype HeaderPropsType = {\n    isAuth: boolean;\n    login: string | null;\n    setAuthUserData: (data: AuthType) => void;\n};\n\nexport const Header = (props:HeaderPropsType ) => {\n  return (\n    <header className={s.header}>\n      <img\n        src={\"https://cdn.logo.com/hotlink-ok/logo-social-sq.png\"}\n        alt={\"Logo\"}\n      />\n        <div className={s.loginBlock}>\n            {props.isAuth? props.login\n            :<NavLink to={'/login'}>Login</NavLink> }\n\n        </div>\n    </header>\n  );\n};\n","import React from \"react\";\nimport {Header} from \"./Header\";\nimport axios from \"axios\";\nimport {connect} from \"react-redux\";\nimport {AuthType, setAuthUserData} from \"../../redux/authReducer\";\nimport {ReduxRootStateType} from \"../../redux/redux-store\";\n\ntype MapStatePropsType = {\n    isAuth: boolean,\n    login: string | null,\n};\ntype MapDispatchPropsType = {\n    setAuthUserData: (data: AuthType) => void\n};\n\ntype HeaderClassContainerPropsType = MapStatePropsType & MapDispatchPropsType;\n\nexport class HeaderClassContainer extends React.Component<HeaderClassContainerPropsType> {\n    componentDidMount() {\n        axios\n            .get(`https://social-network.samuraijs.com/api/1.0/auth/me`, {\n                withCredentials: true\n            })\n            .then(promise => {\n               if(promise.data.resultCode === 0) {\n                   this.props.setAuthUserData(promise.data.data)\n               }\n            });\n    }\n    render = () => {\n        return <Header {...this.props}/>\n    }\n}\nconst mapStateToProps = (state: ReduxRootStateType):MapStatePropsType  => ({\n    isAuth: state.auth.isAuth,\n    login: state.auth.login,\n})\nexport const HeaderContainer = connect(mapStateToProps, {setAuthUserData}) (\n    HeaderClassContainer);\n","import React from \"react\";\nimport { Route } from \"react-router-dom\";\nimport s from \"./App.module.css\";\nimport { Navbar } from \"./components/Navbar/Navbar\";\nimport {DialoguesContainer} from \"./components/Dialogues/DialoguesContainer\";\nimport UsersContainer from \"./components/Users/UsersContainer\";\nimport {ProfileContainer} from \"./components/Profile/ProfileContainer\";\nimport {HeaderContainer} from \"./components/Header/HeaderContainer\";\n\n\n\n\nexport function App() {\n  return (\n    <div className={s.appWrapper}>\n      <HeaderContainer />\n      <Navbar />\n      <div className={s.appWrapperContent}>\n          <Route path={\"/profile/:userID?\"} render={() => <ProfileContainer />} />\n        <Route path={\"/dialogues\"} render={() => <DialoguesContainer />} />\n          <Route path={\"/users\"} render={() => <UsersContainer/>} />\n\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./index.css\";\nimport { reduxStore } from \"./redux/redux-store\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\n\n\n\n  ReactDOM.render(\n    <BrowserRouter>\n      <Provider store={reduxStore}>\n        <App />\n      </Provider>\n    </BrowserRouter>,\n    document.getElementById(\"root\"));\n\n\n\n"],"sourceRoot":""}