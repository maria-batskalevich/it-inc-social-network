{"version":3,"file":"static/js/510.5b6d039b.chunk.js","mappings":"0OAiBMA,EAAqGC,EAAAA,MACvG,YAAwC,IAAtCC,EAAqC,EAArCA,aAAcC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,WACnB,OACI,kBAAMC,SAAUH,EAAhB,WACI,0BACI,SAACI,EAAA,EAAD,CACIC,UAAWC,EAAAA,EACXC,KAAM,QACNC,YAAa,QACbC,SAAU,CAACC,EAAAA,SAGnB,0BACI,SAACN,EAAA,EAAD,CACIC,UAAWC,EAAAA,EACXC,KAAM,WACNI,KAAM,WACNH,YAAa,WACbC,SAAU,CAACC,EAAAA,SAGnB,4BACI,SAACN,EAAA,EAAD,CAAOC,UAAWC,EAAAA,EAAOC,KAAM,aAAcI,KAAM,aADvD,iBAICT,IAAc,gBAAKU,IAAKV,EAAYW,IAAK,YACzCX,IACG,0BACI,SAACE,EAAA,EAAD,CACIC,UAAWC,EAAAA,EACXC,KAAM,UACNC,YAAa,UACbC,SAAU,CAACC,EAAAA,QAItBT,IAAS,gBAAKa,UAAWC,EAAAA,EAAAA,eAAhB,SAAmCd,KAE7C,0BACI,+CAMpB,GAAee,EAAAA,EAAAA,GAAiD,CAC5DC,KAAM,aADV,CAEGnB,G,UC3DUoB,EAAQnB,EAAAA,MAAW,YAAqD,IAAlDoB,EAAiD,EAAjDA,MAAOC,EAA0C,EAA1CA,OAAQlB,EAAkC,EAAlCA,WAI9C,OAAIkB,GAAe,SAAC,KAAD,CAAUC,GAAI,cAGzB,4BACI,oCACA,SAAC,EAAD,CAAWlB,SARN,SAACmB,GAAD,OACbH,EAAMG,EAASC,MAAOD,EAASE,SAAUF,EAASG,aAOXvB,WAAYA,U,6BCY3D,GAJuBwB,EAAAA,EAAAA,KALC,SAACC,GAAD,MAAgC,CACpDP,OAAQO,EAAMC,KAAKR,OACnBlB,YAAY2B,EAAAA,EAAAA,IAAiBF,MAMQ,CAACR,MAAAA,EAAAA,IAHnBO,CAG2BR,I,6LCrB5CY,EAAqC/B,EAAAA,MAAW,YAAyB,IAAtBgC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACrDC,EAAoBF,EAAKG,SAAWH,EAAK9B,MAE/C,OACI,iBACIa,UAAWqB,EAAAA,EAAAA,YAAsB,KAAOF,EAAWE,EAAAA,EAAAA,MAAgB,IADvE,WAGI,yBAAMH,KACN,yBAAMC,IAAY,0BAAOF,EAAK9B,gBAK7BmC,EAAkCrC,EAAAA,MAAW,SAACsC,GACPA,EAAxCL,SAAR,IAAkBM,EAA8BD,EAA9BC,MAAgBC,GAAcF,EAAvBN,MAAzB,OAAgDM,EAAhD,IACA,OACI,SAACP,GAAD,kBAAiBO,GAAjB,cACI,uCAAcC,GAAWC,UAKxBjC,EAA+BP,EAAAA,MAAW,SAACsC,GACJA,EAAxCL,SAAR,IAAkBM,EAA8BD,EAA9BC,MAAgBC,GAAcF,EAAvBN,MAAzB,OAAgDM,EAAhD,IACA,OACI,SAACP,GAAD,kBAAiBO,GAAjB,cACI,oCAAWC,GAAWC,W,sGC5B3B,IAAMC,EAAmB,SAACb,GAAD,OAC5BA,EAAMC,KAAKa,IACFC,EAAe,SAACf,GAAD,OACxBA,EAAMC,KAAKR,QAGFS,EAAmB,SAACF,GAAD,OAC5BA,EAAMC,KAAK1B,a,8ECLR,IAI0ByC,EAJpBjC,EAAqC,SAACkC,GAC/C,OAAGA,EAAc,KACV,qBAOEC,GALoBF,EAKW,GALW,SAACC,GACpD,OAAGA,EAAME,OAASH,EAAkB,KAC9B,iBAAN,OAAwBA,EAAxB,e,mBCTJ,KAAgB,YAAc,kCAAkC,MAAQ,4BAA4B,eAAiB","sources":["components/Login/LoginForm.tsx","components/Login/Login.tsx","components/Login/LoginContainer.ts","components/common/FormControls/FormControls.tsx","redux/authSelectors.tsx","utils/validators/validators.tsx","webpack://way-of-samurai/./src/components/common/FormControls/FormControls.module.css?7a3d"],"sourcesContent":["import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../common/FormControls/FormControls\";\r\nimport {requiredField} from \"../../utils/validators/validators\";\r\nimport s from \"../common/FormControls/FormControls.module.css\";\r\n\r\nexport type LoginFormDataType = {\r\n    email: string;\r\n    password: string;\r\n    rememberMe: boolean;\r\n    captcha?: string;\r\n};\r\n\r\ntype LoginFormPropsType = {\r\n    captchaURL: null | string;\r\n};\r\n\r\nconst LoginForm: React.FC<LoginFormPropsType & InjectedFormProps<LoginFormDataType, LoginFormPropsType>> = React.memo(\r\n    ({handleSubmit, error, captchaURL}) => {\r\n        return (\r\n            <form onSubmit={handleSubmit}>\r\n                <div>\r\n                    <Field\r\n                        component={Input}\r\n                        name={\"email\"}\r\n                        placeholder={\"Email\"}\r\n                        validate={[requiredField]}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Field\r\n                        component={Input}\r\n                        name={\"password\"}\r\n                        type={\"password\"}\r\n                        placeholder={\"Password\"}\r\n                        validate={[requiredField]}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Field component={Input} name={\"rememberMe\"} type={\"checkbox\"}/>\r\n                    Remember me\r\n                </div>\r\n                {captchaURL && <img src={captchaURL} alt={\"Captcha\"}/>}\r\n                {captchaURL && (\r\n                    <div>\r\n                        <Field\r\n                            component={Input}\r\n                            name={\"captcha\"}\r\n                            placeholder={\"Captcha\"}\r\n                            validate={[requiredField]}\r\n                        />\r\n                    </div>\r\n                )}\r\n                {error && <div className={s.formLevelError}>{error}</div>}\r\n\r\n                <div>\r\n                    <button>Log in</button>\r\n                </div>\r\n            </form>\r\n        );\r\n    });\r\n\r\nexport default reduxForm<LoginFormDataType, LoginFormPropsType>({\r\n    form: \"loginForm\",\r\n})(LoginForm);","import React from \"react\";\r\nimport {LoginPropsType} from \"./LoginContainer\";\r\nimport LoginForm, {LoginFormDataType} from \"./LoginForm\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport const Login = React.memo(({ login, isAuth, captchaURL  }: LoginPropsType) => {\r\n    const onSubmit = (formData: LoginFormDataType) =>\r\n        login(formData.email, formData.password, formData.rememberMe);\r\n\r\n    if (isAuth) return <Redirect to={\"/profile\"} />;\r\n    else\r\n        return (\r\n            <div>\r\n                <h1>Log in</h1>\r\n                <LoginForm onSubmit={onSubmit} captchaURL={captchaURL} />\r\n            </div>\r\n        );\r\n});","import {ReduxRootStateType} from \"../../redux/redux-store\";\r\nimport {Login} from \"./Login\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/authReducer\";\r\nimport {selectCaptchaURL} from \"../../redux/authSelectors\";\r\n\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>;\r\ntype MapDispatchPropsType = {\r\n    login: (\r\n        email: string,\r\n        password: string,\r\n        rememberMe?: boolean,\r\n        captcha?: string\r\n    ) => void;\r\n};\r\nexport type LoginPropsType = MapStatePropsType & MapDispatchPropsType;\r\n\r\nconst mapStateToProps = (state: ReduxRootStateType) => ({\r\n    isAuth: state.auth.isAuth,\r\n    captchaURL: selectCaptchaURL(state),\r\n});\r\n\r\nconst LoginContainer = connect<MapStatePropsType,\r\n    MapDispatchPropsType,\r\n    unknown,\r\n    ReduxRootStateType>(mapStateToProps, {login})(Login);\r\nexport default LoginContainer;","import React, { FC } from \"react\";\r\nimport { WrappedFieldProps } from \"redux-form\";\r\nimport classes from \"../FormControls/FormControls.module.css\";\r\n\r\nconst FormControl: FC<WrappedFieldProps> = React.memo(({ meta, children }) => {\r\n    const hasError: boolean = meta.touched && meta.error; // if Field was touched and there is an error ( validate[] )\r\n\r\n    return (\r\n        <div\r\n            className={classes.formControl + \" \" + (hasError ? classes.error : \"\")}\r\n        >\r\n            <div>{children}</div>\r\n            <div>{hasError && <span>{meta.error}</span>}</div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport const Textarea: FC<WrappedFieldProps> = React.memo((props) => {\r\n    const { children, input, meta, ...restProps } = props;\r\n    return (\r\n        <FormControl {...props}>\r\n            <textarea {...input} {...restProps} />\r\n        </FormControl>\r\n    );\r\n});\r\n\r\nexport const Input: FC<WrappedFieldProps> = React.memo((props) => {\r\n    const { children, input, meta, ...restProps } = props;\r\n    return (\r\n        <FormControl {...props}>\r\n            <input {...input} {...restProps} />\r\n        </FormControl>\r\n    );\r\n});","import {ReduxRootStateType} from \"./redux-store\";\r\n\r\nexport const selectAuthUserId = (state: ReduxRootStateType): number | null =>\r\n    state.auth.id;\r\nexport const selectIsAuth = (state: ReduxRootStateType): boolean =>\r\n    state.auth.isAuth;\r\nexport const selectLogin = (state: ReduxRootStateType): string | null =>\r\n    state.auth.login;\r\nexport const selectCaptchaURL = (state: ReduxRootStateType): null | string =>\r\n    state.auth.captchaURL;","import React from \"react\";\r\n\r\ntype FieldValidatorType = (value: string) => string | null;\r\n\r\nexport const requiredField: FieldValidatorType  = (value) => {\r\n    if(value) return null\r\n    return 'Field is required'\r\n}\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if(value.length < maxLength) return null\r\n    return `Max length is ${maxLength} symbols`\r\n}\r\n\r\nexport const maxLenght20 = maxLengthCreator(20)","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormControls_formControl__YxJOw\",\"error\":\"FormControls_error__ukpSl\",\"formLevelError\":\"FormControls_formLevelError__pBrdE\"};"],"names":["LoginForm","React","handleSubmit","error","captchaURL","onSubmit","Field","component","Input","name","placeholder","validate","requiredField","type","src","alt","className","s","reduxForm","form","Login","login","isAuth","to","formData","email","password","rememberMe","connect","state","auth","selectCaptchaURL","FormControl","meta","children","hasError","touched","classes","Textarea","props","input","restProps","selectAuthUserId","id","selectIsAuth","maxLength","value","maxLenght20","length"],"sourceRoot":""}