{"version":3,"file":"static/js/447.fa2cab81.chunk.js","mappings":"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","sources":["webpack://way-of-samurai/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","webpack://way-of-samurai/./src/components/Profile/ProfileInfo/ProfilePhoto/ProfilePhoto.module.css?6566","components/Profile/ProfileInfo/ProfilePhoto/ProfilePhoto.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://way-of-samurai/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://way-of-samurai/./src/components/Profile/MyPosts/AddPostForm/AddPostForm.module.css?7b47","components/Profile/MyPosts/AddPostForm/AddPostForm.tsx","webpack://way-of-samurai/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","redux/profileSelectors.ts","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/common/FormControls/FormControls.tsx","hoc/withAuthRedirect.tsx","redux/authSelectors.tsx","utils/validators/validators.tsx","webpack://way-of-samurai/./src/components/common/FormControls/FormControls.module.css?7a3d"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__y+ySX\"};","// extracted by mini-css-extract-plugin\nexport default {\"userPhoto\":\"ProfilePhoto_userPhoto__TdSLi\",\"setUserPhoto\":\"ProfilePhoto_setUserPhoto__H5IY9\"};","import React, { ChangeEvent } from \"react\";\r\nimport s from \"./ProfilePhoto.module.css\";\r\nimport userAva from \"../../../../assets/images/userAvatar.png\";\r\n\r\ntype ProfilePhotoPropsType = {\r\n    profilePhoto?: string;\r\n    isProfileOwner: boolean;\r\n    updateProfilePhoto: (photo: File) => void;\r\n};\r\n\r\nexport const ProfilePhoto = React.memo(\r\n    ({\r\n         isProfileOwner,\r\n         profilePhoto,\r\n         updateProfilePhoto,\r\n     }: ProfilePhotoPropsType) => {\r\n        const onUserPhotoSelected = (event: ChangeEvent<HTMLInputElement>) => {\r\n            event.target.files &&\r\n            event.target.files.length &&\r\n            updateProfilePhoto(event.target.files[0]);\r\n        };\r\n\r\n        return (\r\n            <div>\r\n                <img\r\n                    className={s.userPhoto}\r\n                    src={profilePhoto || userAva}\r\n                    alt={\"User\"}\r\n                />\r\n                {isProfileOwner && (\r\n                    <input\r\n                        type={\"file\"}\r\n                        onChange={onUserPhotoSelected}\r\n                        className={s.setUserPhoto}\r\n                    />\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n);","import React from \"react\";\nimport s from \"./ProfileInfo.module.css\";\nimport {Preloader} from \"../../common/Preloader/Preloader\";\nimport {UserProfileType} from \"../../../api/API\";\nimport {ProfilePhoto} from \"./ProfilePhoto/ProfilePhoto\";\n\ntype ProfileInfoPropsType = {\n    userProfile: UserProfileType;\n    status: string;\n    updateProfileStatus: (status: string) => void;\n    isProfileOwner: boolean;\n    updateProfilePhoto: (photo: File) => void;\n};\n\nfunction ProfileStatusWithHooks(props: { updateProfileStatus: (status: string) => void, status: string }) {\n    return null;\n}\n\nexport const ProfileInfo = React.memo(\n    ({\n         userProfile,\n         updateProfileStatus,\n         status,\n         isProfileOwner,\n         updateProfilePhoto,\n     }: ProfileInfoPropsType) => {\n        if (!userProfile.userId) {\n            return <Preloader/>\n        } else\n            return (\n                <div>\n                    <div>\n                        <img className={s.image}\n                             src={\"https://images.ctfassets.net/hrltx12pl8hq/7yQR5uJhwEkRfjwMFJ7bUK/dc52a0913e8ff8b5c276177890eb0129/offset_comp_772626-opt.jpg?fit=fill&w=800&h=300\"}\n                             alt={\"background\"}\n                        />\n                    </div>\n                    <div className={s.descriptionBlock}>\n                        <ProfilePhoto\n                            updateProfilePhoto={updateProfilePhoto}\n                            isProfileOwner={isProfileOwner}\n                            profilePhoto={userProfile.photos.large}\n                        />\n                    </div>\n                    <img alt={'users photo'} src={userProfile.photos.large}/>\n                    <ProfileStatusWithHooks\n                        status={status}\n                        updateProfileStatus={updateProfileStatus}/>\n                </div>\n            );\n    }\n)\n\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__xR9zf\",\"posts\":\"MyPosts_posts__38d7t\"};","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"AddPostForm_btn__wmCjM\"};","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../../common/FormControls/FormControls\";\r\nimport {maxLenght20, requiredField} from \"../../../../utils/validators/validators\";\r\nimport s from './AddPostForm.module.css'\r\n\r\n\r\nexport type AddPostFormDataType = {\r\n    newPostText: string;\r\n};\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<AddPostFormDataType>\r\n    > = React.memo(({ handleSubmit }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    component={Textarea}\r\n                    placeholder={\"Post text\"}\r\n                    name={\"newPostText\"}\r\n                    validate={[requiredField, maxLenght20]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button className={s.btn}>Add post</button>\r\n            </div>\r\n        </form>\r\n    );\r\n});\r\n\r\nexport default reduxForm<AddPostFormDataType>({\r\n    form: \"profileAddPostForm\",\r\n})(AddPostForm);","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__Ju2Yi\",\"btn\":\"Post_btn__CqRHX\"};","import React from \"react\";\nimport s from \"./Post.module.css\";\nimport {PostType} from \"../../../../redux/profileReducer\";\n\ntype PostPropsType = PostType & {\n    deletePost: (postId: number) => void;\n};\n\nexport const Post = React.memo(\n    ({deletePost, postText, likesCount, id}: PostPropsType) => {\n        const onClickHandler = () => deletePost(id);\n        return (\n            <div className={s.item}>\n                <img\n                    src={\n                        \"https://png.pngtree.com/png-clipart/20190920/original/pngtree-happy-fox-avatar-illustration-png-image_4677278.jpg\"\n                    }\n\n                    alt={\"person photo\"}\n                />\n                {postText}\n                <div>\n                    <span>{likesCount}</span>\n                </div>\n                <button onClick={onClickHandler} className={s.btn}>\n                    Delete post\n                </button>\n            </div>\n        );\n    }\n);\n","import React from \"react\";\nimport s from \"./MyPosts.module.css\";\nimport AddPostForm, {AddPostFormDataType} from \"./AddPostForm/AddPostForm\";\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\nimport {Post} from \"./Post/Post\";\n\nexport const MyPosts = React.memo(\n    ({posts, addPost, deletePost}: MyPostsPropsType) => {\n    const postsElements = posts.map((post) => (\n        <Post\n            key={post.id}\n            postText={post.postText}\n            likesCount={post.likesCount}\n            id={post.id}\n            deletePost={deletePost}\n        />\n    ));\n\n    const onPostAdding = (values: AddPostFormDataType) => {\n        addPost(values.newPostText);\n    };\n\n    return (\n        <div className={s.postsBlock}>\n            <h3>My posts</h3>\n            <div>\n                <AddPostForm onSubmit={onPostAdding}/>\n            </div>\n            <div className={s.posts}>{postsElements}</div>\n        </div>\n    );\n});\n","import {PostType, UserProfileType} from \"./profileReducer\";\r\nimport {ReduxRootStateType} from \"./redux-store\";\r\n\r\nexport const selectUserProfile = (state: ReduxRootStateType): UserProfileType =>\r\n    state.profilePage.userProfile;\r\nexport const selectStatus = (state: ReduxRootStateType): string =>\r\n    state.profilePage.status;\r\nexport const selectPosts = (state: ReduxRootStateType): Array<PostType> =>\r\n    state.profilePage.posts;","import React from \"redux\";\r\nimport {addPost, deletePost} from \"../../../redux/profileReducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {ReduxRootStateType} from \"../../../redux/redux-store\";\r\nimport {selectPosts} from \"../../../redux/profileSelectors\";\r\n\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>;\r\ntype MapDispatchPropsType = {\r\n    addPost: (newPostText: string) => void;\r\n    deletePost: (postId: number) => void;\r\n};\r\nexport type MyPostsPropsType = MapStatePropsType & MapDispatchPropsType;\r\n\r\nconst mapStateToProps = (state: ReduxRootStateType) => {\r\n    return {\r\n        posts: selectPosts(state),\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect<\r\n    MapStatePropsType,\r\n    MapDispatchPropsType,\r\n    unknown,\r\n    ReduxRootStateType\r\n    >(mapStateToProps, {\r\n    addPost, deletePost\r\n})(MyPosts)\r\n","import React from \"react\";\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\nimport {UserProfileType} from \"../../redux/profileReducer\";\n\nexport type ProfilePropsType = {\n    userProfile: UserProfileType;\n    status: string\n    updateProfileStatus: (status: string) => void\n    isProfileOwner: boolean;\n    updateProfilePhoto: (photo: File) => void;\n\n};\n\nexport const Profile = React.memo(\n    ({\n         userProfile,\n         updateProfileStatus,\n         status,\n         isProfileOwner,\n         updateProfilePhoto,\n     }: ProfilePropsType) => {\n    return (\n        <div>\n            <ProfileInfo\n                userProfile={userProfile}\n                status={status}\n                updateProfileStatus={updateProfileStatus}\n                isProfileOwner={isProfileOwner}\n                updateProfilePhoto={updateProfilePhoto}\n            />\n            <MyPostsContainer/>\n        </div>\n    );\n}\n);\n","import React from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getProfileStatus,\r\n    getUserProfile,\r\n    updateProfilePhoto, updateProfileStatus,\r\n} from \"../../redux/profileReducer\";\r\nimport {ReduxRootStateType} from \"../../redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from 'redux';\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {selectAuthUserId, selectIsAuth} from \"../../redux/authSelectors\";\r\n\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>;\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: any) => void;\r\n    getProfileStatus: (userId: any) => void\r\n    updateProfileStatus: (status: string) => void;\r\n    updateProfilePhoto: (photo: File) => void;\r\n};\r\ntype ProfilePathParamsType = {\r\n    userId: any;\r\n};\r\ntype ProfileClassContainerURLPropsType = RouteComponentProps<ProfilePathParamsType> &\r\n    MapStatePropsType & MapDispatchPropsType;\r\n\r\nclass ProfileClassContainer extends React.PureComponent<ProfileClassContainerURLPropsType> {\r\n    updateUserProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId && this.props.authUserId) {\r\n            userId = this.props.authUserId;\r\n        } else if (!userId && !this.props.authUserId) {\r\n            this.props.history.push(\"/login\"); // program redirect - not via JSX !\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getProfileStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateUserProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileClassContainerURLPropsType>) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.updateUserProfile();\r\n        }\r\n    }\r\n\r\n    render = () => {\r\n        return (\r\n            <Profile\r\n                isProfileOwner={!this.props.match.params.userId}\r\n                userProfile={this.props.userProfile}\r\n                status={this.props.status}\r\n                updateProfileStatus={this.props.updateProfileStatus}\r\n                updateProfilePhoto={this.props.updateProfilePhoto}/>\r\n        );\r\n    };\r\n}\r\n\r\nlet mapStateToProps = (state: ReduxRootStateType) => ({\r\n    userProfile: state.profilePage.userProfile,\r\n    status: state.profilePage.status,\r\n    authUserId: selectAuthUserId(state),\r\n    isAuth: selectIsAuth(state),\r\n})\r\n\r\nconst ProfileContainer = compose<React.ComponentType>(\r\n    connect<MapStatePropsType, MapDispatchPropsType, unknown, ReduxRootStateType>\r\n    (mapStateToProps,\r\n        {\r\n            getUserProfile,\r\n            getProfileStatus,\r\n            updateProfileStatus,\r\n            updateProfilePhoto,\r\n        }\r\n        ),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileClassContainer)\r\nexport default ProfileContainer;\r\n","import React, { FC } from \"react\";\r\nimport { WrappedFieldProps } from \"redux-form\";\r\nimport classes from \"../FormControls/FormControls.module.css\";\r\n\r\nconst FormControl: FC<WrappedFieldProps> = React.memo(({ meta, children }) => {\r\n    const hasError: boolean = meta.touched && meta.error; // if Field was touched and there is an error ( validate[] )\r\n\r\n    return (\r\n        <div\r\n            className={classes.formControl + \" \" + (hasError ? classes.error : \"\")}\r\n        >\r\n            <div>{children}</div>\r\n            <div>{hasError && <span>{meta.error}</span>}</div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport const Textarea: FC<WrappedFieldProps> = React.memo((props) => {\r\n    const { children, input, meta, ...restProps } = props;\r\n    return (\r\n        <FormControl {...props}>\r\n            <textarea {...input} {...restProps} />\r\n        </FormControl>\r\n    );\r\n});\r\n\r\nexport const Input: FC<WrappedFieldProps> = React.memo((props) => {\r\n    const { children, input, meta, ...restProps } = props;\r\n    return (\r\n        <FormControl {...props}>\r\n            <input {...input} {...restProps} />\r\n        </FormControl>\r\n    );\r\n});","import {ReduxRootStateType} from \"../redux/redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {ComponentType} from \"react\";\r\n\r\ntype mapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: ReduxRootStateType): mapStatePropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: mapStatePropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectedAuthRedirectComponent\r\n}","import {ReduxRootStateType} from \"./redux-store\";\r\n\r\nexport const selectAuthUserId = (state: ReduxRootStateType): number | null =>\r\n    state.auth.id;\r\nexport const selectIsAuth = (state: ReduxRootStateType): boolean =>\r\n    state.auth.isAuth;\r\nexport const selectLogin = (state: ReduxRootStateType): string | null =>\r\n    state.auth.login;\r\nexport const selectCaptchaURL = (state: ReduxRootStateType): null | string =>\r\n    state.auth.captchaURL;","import React from \"react\";\r\n\r\ntype FieldValidatorType = (value: string) => string | null;\r\n\r\nexport const requiredField: FieldValidatorType  = (value) => {\r\n    if(value) return null\r\n    return 'Field is required'\r\n}\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if(value.length < maxLength) return null\r\n    return `Max length is ${maxLength} symbols`\r\n}\r\n\r\nexport const maxLenght20 = maxLengthCreator(20)","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormControls_formControl__YxJOw\",\"error\":\"FormControls_error__ukpSl\",\"formLevelError\":\"FormControls_formLevelError__pBrdE\"};"],"names":["ProfilePhoto","React","isProfileOwner","profilePhoto","updateProfilePhoto","className","s","src","userAva","alt","type","onChange","event","target","files","length","ProfileStatusWithHooks","props","ProfileInfo","userProfile","updateProfileStatus","status","userId","photos","large","Preloader","AddPostForm","handleSubmit","onSubmit","Field","component","Textarea","placeholder","name","validate","requiredField","maxLenght20","reduxForm","form","Post","deletePost","postText","likesCount","id","onClick","MyPosts","posts","addPost","postsElements","map","post","values","newPostText","selectPosts","state","profilePage","MyPostsContainer","connect","Profile","ProfileClassContainer","render","match","params","this","authUserId","history","push","getUserProfile","getProfileStatus","updateUserProfile","prevProps","compose","selectAuthUserId","isAuth","selectIsAuth","withRouter","withAuthRedirect","FormControl","meta","children","hasError","touched","error","classes","input","restProps","Input","mapStateToPropsForRedirect","auth","Component","to","selectCaptchaURL","captchaURL","maxLength","value"],"sourceRoot":""}