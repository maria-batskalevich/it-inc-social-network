{"version":3,"sources":["components/Dialogues/Dialogues.module.css","components/Users/users.module.css","App.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Header/Header.module.css","components/Dialogues/DialogueItem/DialogueItem.module.css","components/Dialogues/Message/Message.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Navbar/Navbar.module.css","api/api.tsx","redux/profileReducer.ts","redux/dialoguesReducer.ts","redux/usersReducer.ts","redux/authReducer.ts","redux/redux-store.ts","components/Navbar/Navbar.tsx","components/Dialogues/DialogueItem/DialogueItem.tsx","components/Dialogues/Message/Message.tsx","components/Dialogues/DialoguesContainer.tsx","components/Dialogues/Dialogues.tsx","assets/images/user.png","components/Users/Users.tsx","assets/images/loadingBook.svg","components/common/Preloader/Preloader.tsx","components/Users/UsersContainer.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","App.tsx","index.tsx"],"names":["module","exports","instance","axios","create","withCredentials","baseURL","headers","usersAPI","currentPage","pageSize","get","then","promise","data","userId","post","delete","userID","authAPI","ADD_POST","UPDATE_NEW_POST_TEXT","SET_USER_PROFILE","initialProfileState","posts","newPostText","userProfile","UPDATE_NEW_MESSAGE_TEXT","SEND_MESSAGE","initialDialoguesState","dialogues","id","personName","messages","messageText","newMessageText","FOLLOW","UNFOLLOW","SET_USERS","initialUsersState","users","totalUsersCount","isFetching","followingInProgress","toggleIsFetching","type","toggleFollowingProgress","SET_USER_DATA","initialAuthUserState","email","login","isAuth","authReducer","state","action","reduxReducers","combineReducers","profilePage","newPost","postText","likesCount","inputPostText","dialoguesPage","inputMessageText","usersPage","map","u","followed","filter","auth","reduxStore","createStore","applyMiddleware","thunkMiddleware","Navbar","className","s","nav","item","to","activeClassName","active","DialogueItem","props","path","classes","dialogue","Message","message","DialoguesContainer","connect","updateNewMessageText","sendMessage","dialogueElements","messageElements","dialoguesList","messagesList","value","onChange","event","currentTarget","placeholder","onClick","Users","React","memo","pagesCount","Math","ceil","pages","i","push","p","selectedPage","page","e","onPageChanged","avatar","src","photos","small","user","disabled","some","unfollow","follow","name","status","Preloader","preloader","alt","UsersContainer","pageNumber","setCurrentPage","getUsers","this","Component","dispatch","resultCode","items","totalCount","ProfileInfo","image","descriptionBlock","Post","MyPostsContainer","updateNewPostText","addPost","postsElements","postsBlock","Profile","ProfileClassContainer","render","Number","match","params","getUserProfile","ProfileURLContainer","withRouter","ProfileContainer","response","Header","header","loginBlock","HeaderClassContainer","getAuthUserData","HeaderContainer","setAuthUserData","Login","App","appWrapper","appWrapperContent","ReactDOM","store","document","getElementById"],"mappings":"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","file":"static/js/main.1e2fd19b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialoguesPage\":\"Dialogues_dialoguesPage__1gZ1M\",\"dialoguesList\":\"Dialogues_dialoguesList__xmogx\",\"active\":\"Dialogues_active__jc3c8\",\"messagesList\":\"Dialogues_messagesList__EVw8R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"users_avatar__2NBm8\",\"selectedPage\":\"users_selectedPage__2VY4r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appWrapper\":\"App_appWrapper__1N3As\",\"appWrapperContent\":\"App_appWrapperContent__1Rv3K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__mkR90\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2-bek\",\"posts\":\"MyPosts_posts__zQK6_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3vltG\",\"loginBlock\":\"Header_loginBlock__j78vF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogue\":\"DialogueItem_dialogue__28rWi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__3tJw3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1zOmz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__-FuZV\",\"item\":\"Navbar_item__2-lI7\",\"active\":\"Navbar_active__KiUqI\"};","import axios from \"axios\";\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": \"c8be0b36-3ac5-42a7-89ea-e79ef5d95007\"\r\n    }\r\n})\r\n\r\nexport const usersAPI = {\r\n    gerUsers: (currentPage: 1, pageSize: 10) => {\r\n        return instance\r\n            .get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(promise => promise.data)\r\n    },\r\n    follow(userId: number) {\r\n        return instance\r\n            .post(`follow/${userId}`)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance\r\n            .delete(`follow/${userId}`)\r\n    },\r\n    getProfile(userID: string) {\r\n        return instance\r\n            .get(`profile/${userID}`);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`auth/me`)\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import {usersAPI} from \"../api/api\";\n\nexport type InitialProfileStateType = typeof initialProfileState;\ntype ProfileReducerActionTypes =\n    | ReturnType<typeof addPost>\n    | ReturnType<typeof updateNewPostText>\n    | ReturnType<typeof setUserProfile>;\n\nconst ADD_POST = \"ADD-POST\";\nconst UPDATE_NEW_POST_TEXT = \"UPDATE-NEW-POST-TEXT\";\nconst SET_USER_PROFILE = 'SET-USER-PROFILE'\nexport type PostType = {\n    id: number;\n    postText: string;\n    likesCount: number;\n};\ntype UserContactsType = {\n    github: string;\n    vk: string;\n    facebook: string;\n    instagram: string;\n    twitter: string;\n    website: string;\n    youtube: string;\n    mainLink: string;\n};\ntype PhotosType = {\n    small: string;\n    large: string;\n};\n\nexport type UserProfileType = {\n    aboutMe: string;\n    userId: number;\n    lookingForAJob: boolean;\n    lookingForAJobDescription: string;\n    fullName: string;\n    contacts: UserContactsType;\n    photos: PhotosType;\n};\n\nconst initialProfileState = {\n    posts: [] as PostType[],\n    newPostText: \"\",\n    userProfile: {} as UserProfileType,\n};\n\nexport const profileReducer = (\n    state: InitialProfileStateType = initialProfileState,\n    action: ProfileReducerActionTypes\n): InitialProfileStateType => {\n    switch (action.type) {\n        case ADD_POST:\n            const newPost = {\n                id: 4,\n                postText: state.newPostText,\n                likesCount: 0,\n            };\n            return {\n                ...state,\n                posts: [...state.posts, newPost],\n                newPostText: \"\",\n            };\n        case UPDATE_NEW_POST_TEXT:\n            return {\n                ...state,\n                newPostText: action.inputPostText,\n            };\n        case SET_USER_PROFILE: {\n            return {...state, userProfile: action.userProfile};\n        }\n\n        default:\n            return state;\n    }\n};\n\nexport const addPost = () => ({type: ADD_POST} as const);\nexport const updateNewPostText = (inputPostText: string) =>\n    ({\n        type: UPDATE_NEW_POST_TEXT,\n        inputPostText,\n    } as const);\n\nexport const setUserProfile = (userProfile: UserProfileType) => ({\n    type: SET_USER_PROFILE,\n    userProfile,\n} as const)\n\nexport const getUserProfile = (userId: any) => (dispatch: any) => {\n    usersAPI.getProfile(userId).then(response => {\n        dispatch(setUserProfile(response.data))\n    })\n}","import {ActionTypes} from \"./redux-store\";\n\nexport type InitialDialoguesStateType = typeof initialDialoguesState;\n\nconst UPDATE_NEW_MESSAGE_TEXT = \"UPDATE-NEW-MESSAGE-TEXT\";\nconst SEND_MESSAGE = \"SEND-MESSAGE\";\n\nexport type DialogueItemType = {\n    id: number;\n    personName: string;\n};\nexport type MessageType = {\n    id: number;\n    messageText: string;\n};\n\ntype DialoguesInitialStateType = typeof initialDialoguesState;\ntype DialoguesReducerActionTypes =\n    | ReturnType<typeof updateNewMessageText>\n    | ReturnType<typeof sendMessage>;\n\nconst initialDialoguesState = {\n    dialogues: [\n        {id: 1, personName: \"1111\"},\n        {id: 2, personName: \"2222\"},\n        {id: 3, personName: \"3333\"},\n        {id: 4, personName: \"4444\"},\n        {id: 5, personName: \"5555\"},\n\n    ] as DialogueItemType[],\n    messages: [\n        {id: 1, messageText: \"Hi-Hi-Hi!!!!!!\"},\n        {id: 2, messageText: \"Go to sleep, pls))))).\"},\n        {id: 3, messageText: \"I Love You!!)))\"},\n        {id: 4, messageText: \"Why.....&\"},\n        {id: 5, messageText: \"$500/month is not enough... We can do better!!!!\"},\n\n    ] as MessageType[],\n    newMessageText: \"\",\n};\nexport const dialoguesReducer = (\n    state: DialoguesInitialStateType = initialDialoguesState,\n    action: DialoguesReducerActionTypes\n): DialoguesInitialStateType => {\n\n\n    switch (action.type) {\n        case UPDATE_NEW_MESSAGE_TEXT:\n            return {\n                ...state,\n                newMessageText: action.inputMessageText\n            }\n\n        case SEND_MESSAGE:\n            return {\n                ...state,\n                newMessageText: \"\",\n                messages: [...state.messages, {id: 6, messageText: state.newMessageText}]\n            }\n\n        default:\n            return state;\n    }\n};\n\nexport const updateNewMessageText = (inputMessageText: string) =>\n    ({\n        type: UPDATE_NEW_MESSAGE_TEXT,\n        inputMessageText,\n    } as const);\nexport const sendMessage = () =>\n    ({\n        type: SEND_MESSAGE,\n    } as const);\n","import {usersAPI} from \"../api/api\";\nimport {Dispatch} from \"react\";\n\nexport type InitialUsersStateType = typeof initialUsersState;\ntype UsersReducerActionTypes =\n    ReturnType<typeof followSuccess>\n    | ReturnType<typeof unfollowSuccess>\n    | ReturnType<typeof setUsers>\n    | ReturnType<typeof setCurrentPage>\n    | ReturnType<typeof setTotalUsersCount>\n    | ReturnType<typeof toggleIsFetching>\n    | ReturnType<typeof toggleFollowingProgress>;\n\nconst FOLLOW = \"FOLLOW\";\nconst UNFOLLOW = \"UNFOLLOW\";\nconst SET_USERS = 'SET-USERS';\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE'\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT'\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING'\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS'\n\nexport type UserType = {\n    id: number,\n    name: string,\n    status: string,\n    followed: boolean,\n    photos: PhotosType,\n}\n\ntype PhotosType = {\n    small: string,\n    large: string,\n}\nconst initialUsersState = {\n    users: [] as UserType[],\n    pageSize: 50,\n    totalUsersCount: 0,\n    currentPage: 1,\n    isFetching: true,\n    followingInProgress: [] as Array<number>\n};\n\nexport const usersReducer = (\n    state: InitialUsersStateType = initialUsersState,\n    action: UsersReducerActionTypes) => {\n    switch (action.type) {\n        case FOLLOW:\n            return {\n                ...state,\n                users: state.users.map(u => u.id === action.userId ? {...u, followed: true} : u)\n            }\n        case UNFOLLOW:\n            return {\n                ...state,\n                users: state.users.map(u => u.id === action.userId ? {...u, followed: false} : u)\n            }\n        case SET_USERS:\n            return {...state, users: [...action.users]}\n\n        case \"SET_CURRENT_PAGE\":\n            return {\n                ...state, currentPage: action.currentPage\n            }\n        case \"SET_TOTAL_USERS_COUNT\":\n            return {\n                ...state, totalUsersCount: action.totalUsersCount\n            }\n        case 'TOGGLE_IS_FETCHING':\n            return {...state, isFetching: action.isFetching}\n\n        case 'TOGGLE_IS_FOLLOWING_PROGRESS':\n            return {\n                ...state,\n                followingInProgress: action.followingInProgress\n                    ? [...state.followingInProgress, action.userId]\n                    : state.followingInProgress.filter(id => id !== action.userId)\n            }\n\n        default:\n            return state;\n    }\n};\n\nexport const followSuccess = (userId: number) => ({type: FOLLOW, userId} as const);\nexport const unfollowSuccess = (userId: number) => ({type: UNFOLLOW, userId} as const);\nexport const setUsers = (users: UserType[]) => ({type: SET_USERS, users} as const);\nexport const setCurrentPage = (currentPage: number) => ({type: SET_CURRENT_PAGE, currentPage} as const);\nexport const setTotalUsersCount = (totalUsersCount: number) => ({\n    type: SET_TOTAL_USERS_COUNT,\n    totalUsersCount\n} as const);\nexport const toggleIsFetching = (isFetching: boolean) => ({type: TOGGLE_IS_FETCHING, isFetching} as const);\nexport const toggleFollowingProgress = (userId: number, followingInProgress: boolean) => ({\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\n    userId,\n    followingInProgress\n} as const);\n\n\nexport const getUsers = (currentPage: any, pageSize: any) => (dispatch: Dispatch<any>) => {\n        dispatch(toggleIsFetching(true));\n        usersAPI\n            .gerUsers(currentPage, pageSize)\n            .then(data => {\n                dispatch(toggleIsFetching(false))\n                dispatch(setUsers(data.items));\n                dispatch(setTotalUsersCount(data.totalCount));\n            });\n}\n\nexport const follow = (userId: any) => (dispatch: Dispatch<any>) => {\n\n        dispatch(toggleFollowingProgress(userId, true))\n        usersAPI.follow(userId)\n            .then(promise => {\n                if (promise.data.resultCode === 0) {\n                    followSuccess(userId)\n                }\n                dispatch(toggleFollowingProgress(userId, false))\n            })\n}\n\nexport const unfollow = (userId: number) => (dispatch: Dispatch<any>) => {\n\n        dispatch(toggleFollowingProgress(userId, true))\n        usersAPI.unfollow(userId)\n            .then(promise => {\n                if (promise.data.resultCode === 0) {\n                    unfollowSuccess(userId)\n                }\n                dispatch(toggleFollowingProgress(userId, false))\n            })\n}\n\n\n","import {authAPI} from \"../api/api\";\nimport {Dispatch} from \"react\";\n\nexport type InitialUsersStateType = typeof initialAuthUserState;\nexport type AuthReducerActionTypes =\n    | ReturnType<typeof setAuthUserData>\nconst SET_USER_DATA = 'SET-USER-DATA';\n\nexport type AuthType = {\n    id: number | null;\n    login: string | null;\n    email: string | null;\n    isAuth: boolean;\n};\n\nconst initialAuthUserState = {\n    id: null,\n    email: null,\n    login: null,\n    isAuth: false,\n} as AuthType;\n\nexport const authReducer = (\n    state: InitialUsersStateType = initialAuthUserState,\n    action: AuthReducerActionTypes) => {\n    switch (action.type) {\n        case SET_USER_DATA:\n            return {\n                ...state,\n               ...action.data,\n                isAuth: true\n            }\n\n        default:\n            return state;\n    }\n};\n\nexport const setAuthUserData = (initialAuthUserState: InitialUsersStateType) => ({type: SET_USER_DATA, data: initialAuthUserState} as const);\nexport const getAuthUserData = () => (dispatch: Dispatch<any>) => {\n    authAPI.me().then(promise => {\n        if (promise.data.resultCode === 0) {\n            dispatch(setAuthUserData(promise.data.data));\n        }\n    });\n}\n\nexport default authReducer;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport {\n    profileReducer,\n    addPost,\n    updateNewPostText, setUserProfile,\n} from \"./profileReducer\";\nimport {\n    dialoguesReducer,\n    sendMessage,\n    updateNewMessageText,\n} from \"./dialoguesReducer\";\nimport {\n    follow, setCurrentPage, setTotalUsersCount, setUsers, toggleIsFetching, unfollow,\n    usersReducer\n} from \"./usersReducer\";\nimport authReducer from \"./authReducer\";\nimport thunkMiddleware from 'redux-thunk'\n\nexport type ReduxRootStateType = ReturnType<typeof reduxReducers>;\nexport type ReduxStoreType = typeof reduxStore;\n\nexport type ActionTypes =\n    | ReturnType<typeof addPost>\n    | ReturnType<typeof updateNewPostText>\n    | ReturnType<typeof updateNewMessageText>\n    | ReturnType<typeof sendMessage>\n    | ReturnType<typeof follow>\n    | ReturnType<typeof unfollow>\n    | ReturnType<typeof setUsers>\n    | ReturnType<typeof setCurrentPage>\n    | ReturnType<typeof setTotalUsersCount>\n    | ReturnType<typeof toggleIsFetching>\n    | ReturnType<typeof setUserProfile>\n// TYPES\n\nexport const reduxReducers = combineReducers({\n    profilePage: profileReducer,\n    dialoguesPage: dialoguesReducer,\n    usersPage: usersReducer,\n    auth: authReducer,\n\n});\n\nexport const reduxStore = createStore(reduxReducers, applyMiddleware(thunkMiddleware));","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport s from \"./Navbar.module.css\";\n\nexport const Navbar = () => {\n  return (\n    <nav className={s.nav}>\n      <div className={s.item}>\n        <NavLink to={\"/profile\"} activeClassName={s.active}>\n          Profile\n        </NavLink>\n      </div>\n      <div className={s.item}>\n        <NavLink to={\"/dialogues\"} activeClassName={s.active}>\n          Dialogues\n        </NavLink>\n      </div>\n        <div className={s.item}>\n            <NavLink to={\"/users\"} activeClassName={s.active}>\n                Users\n            </NavLink>\n        </div>\n      <div className={s.item}>\n        <NavLink to={\"/news\"} activeClassName={s.active}>\n          News\n        </NavLink>\n      </div>\n      <div className={s.item}>\n        <NavLink to={\"/music\"} activeClassName={s.active}>\n          Music\n        </NavLink>\n      </div>\n      <div className={s.item}>\n        <NavLink to={\"/settings\"} activeClassName={s.active}>\n          Settings\n        </NavLink>\n      </div>\n    </nav>\n  );\n};\n","import React from \"react\";\nimport classes from \"./DialogueItem.module.css\";\nimport { NavLink } from \"react-router-dom\";\n\nexport type DialogueItemPropsType = {\n  id: number;\n  personName: string;\n};\n\nexport const DialogueItem = (props: DialogueItemPropsType) => {\n  const path = `/dialogues/${props.id}`;\n  return (\n    <div className={classes.dialogue}>\n      <NavLink to={path}>{props.personName}</NavLink>\n    </div>\n  );\n};\n","import React from \"react\";\nimport s from \"./Message.module.css\";\n\nexport type MessagePropsType = {\n  id: number;\n  messageText: string;\n};\n\nexport const Message = (props: MessagePropsType) => {\n  return <div className={s.message}>{props.messageText}</div>;\n};\n","import React from \"react\";\nimport {\n    DialogueItemType, MessageType, sendMessage, updateNewMessageText\n} from \"../../redux/dialoguesReducer\";\nimport {Dialogues} from \"./Dialogues\";\nimport {connect} from \"react-redux\";\nimport {ReduxRootStateType} from \"../../redux/redux-store\";\n\ntype MapStatePropsType = {\n    messages: Array<MessageType>;\n    dialogues: Array<DialogueItemType>;\n    newMessageText: string;\n    isAuth: boolean\n};\ntype MapDispatchPropsType = {\n    updateNewMessageText: (newMessageText: string) => void;\n    sendMessage: () => void;\n};\nexport type DialoguesPropsType = MapStatePropsType & MapDispatchPropsType;\n\nconst mapStateToProps = (state: ReduxRootStateType): MapStatePropsType => {\n    return {\n        messages: state.dialoguesPage.messages,\n        dialogues: state.dialoguesPage.dialogues,\n        newMessageText: state.dialoguesPage.newMessageText,\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport const DialoguesContainer = connect(mapStateToProps, {\n    updateNewMessageText, sendMessage})(Dialogues)\n","import React, { ChangeEvent } from \"react\";\nimport s from \"./Dialogues.module.css\";\nimport {\n  DialogueItem,\n  DialogueItemPropsType as DialogueItemType,\n} from \"./DialogueItem/DialogueItem\";\nimport { Message, MessagePropsType as MessageType } from \"./Message/Message\";\nimport {Redirect} from \"react-router-dom\";\n\ntype DialoguesPropsType = {\n  messages: Array<MessageType>;\n  dialogues: Array<DialogueItemType>;\n  newMessageText: string;\n  updateNewMessageText: (newMessageText: string) => void;\n  sendMessage: () => void;\n  isAuth: boolean\n};\n\nexport const Dialogues = (props: DialoguesPropsType) => {\n  const dialogueElements = props.dialogues.map((dialogue) => (\n    <DialogueItem personName={dialogue.personName} id={dialogue.id} />\n  ));\n  const messageElements = props.messages.map((message) => (\n    <Message messageText={message.messageText} id={message.id} />\n  ));\n\n  const onMessageChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\n    props.updateNewMessageText(event.currentTarget.value);\n  };\n\n  const onMessageSending = () => {\n    props.sendMessage();\n  };\n  if (!props.isAuth) return <Redirect to={'/login'}/>\n\n  return (\n    <div className={s.dialoguesPage}>\n      <div className={s.dialoguesList}>{dialogueElements}</div>\n      <div className={s.messagesList}>\n        <div>{messageElements}</div>\n        <div>\n          <div>\n            <textarea\n              value={props.newMessageText}\n              onChange={onMessageChange}\n              placeholder={\"Enter your message\"}\n            />\n          </div>\n          <div>\n            <button onClick={onMessageSending}>Send</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/user.cb9d7bb0.png\";","import React from \"react\";\r\nimport s from \"./users.module.css\";\r\nimport user from \"../../assets/images/user.png\";\r\nimport {UserType} from \"../../redux/usersReducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type UsersPropsType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    users: Array<UserType>,\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    followingInProgress: Array<number>\r\n}\r\n\r\nexport const Users = React.memo((props: UsersPropsType) => {\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize)\r\n    let pages: Array<number> = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                {pages.map(p => {\r\n                    return <span className={props.currentPage === p ? s.selectedPage : s.page}\r\n                                 onClick={(e) => {\r\n                                     props.onPageChanged(p)\r\n                                 }}> {p} </span>\r\n                })}\r\n            </div>\r\n            {\r\n                props.users.map(u => <div key={u.id}>\r\n                    <span>\r\n                        <div>\r\n                            <NavLink to={`/profile/${u.id}`}>\r\n                                <img className={s.avatar} src={u.photos.small ? u.photos.small : user}/>\r\n                            </NavLink>\r\n\r\n                        </div>\r\n                        <div>\r\n                            {u.followed ?\r\n                                <button\r\n                                    disabled={props.followingInProgress.some(id => id === u.id)}\r\n                                    onClick={() => {props.unfollow(u.id)}}>Unfollow</button> :\r\n\r\n                                <button disabled={props.followingInProgress.some(id => id === u.id)}\r\n                                        onClick={() => {props.follow(u.id)}}>Follow</button>}\r\n\r\n                        </div>\r\n                    </span>\r\n                    <span>\r\n                        <div>{u.name}</div>\r\n                        <div>{u.status}</div>\r\n                    </span>\r\n                </div>)\r\n            }\r\n        </div>\r\n    )\r\n})","export default __webpack_public_path__ + \"static/media/loadingBook.b98a8c76.svg\";","import preloader from \"../../../assets/images/loadingBook.svg\";\r\nimport React from \"react\";\r\n\r\nexport const Preloader = () => {\r\n    return(\r\n        <div>\r\n            <img src={preloader} alt={'Loading'}/>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {ReduxRootStateType} from \"../../redux/redux-store\";\r\nimport {Users} from \"./Users\";\r\nimport {Preloader} from \"../common/Preloader/Preloader\";\r\nimport {\r\n    follow, getUsers, setCurrentPage, unfollow, UserType\r\n} from \"../../redux/usersReducer\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    users: Array<UserType>,\r\n    pageSize: number,\r\n    totalUsersCount: number,\r\n    currentPage: number,\r\n    isFetching: boolean,\r\n    followingInProgress: Array<number>,\r\n};\r\ntype MapDispatchPropsType = {\r\n    follow: (userID: number) => void;\r\n    unfollow: (userID: number) => void;\r\n    setCurrentPage: (currentPage: number) => void\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n};\r\n\r\nexport type UsersClassContainerPropsType = MapStatePropsType & MapDispatchPropsType;\r\n\r\nexport class UsersContainer extends React.Component <UsersClassContainerPropsType,\r\n    Array<UserType>> {\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize);\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.setCurrentPage(pageNumber);\r\n        this.props.getUsers(pageNumber, this.props.pageSize);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.props.isFetching ? <Preloader/> : null}\r\n                <Users users={this.props.users}\r\n                       totalUsersCount={this.props.totalUsersCount}\r\n                       pageSize={this.props.pageSize}\r\n                       currentPage={this.props.currentPage}\r\n                       onPageChanged={this.onPageChanged}\r\n                       follow={this.props.follow}\r\n                       unfollow={this.props.unfollow}\r\n                       followingInProgress={this.props.followingInProgress}\r\n                />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: ReduxRootStateType) => {\r\n\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n        followingInProgress: state.usersPage.followingInProgress\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, {\r\n    follow, unfollow, setCurrentPage, getUsers,\r\n})(UsersContainer)","import React from \"react\";\nimport s from \"./ProfileInfo.module.css\";\nimport { ProfilePropsType as ProfileInfoPropsType } from \"../Profile\";\nimport {Preloader} from \"../../common/Preloader/Preloader\";\n\nexport const ProfileInfo = (props: ProfileInfoPropsType) => {\n    if(!props.userProfile.userId) {\n        return <Preloader/>\n    } else\n  return (\n    <div>\n      <div>\n        <img className={s.image}\n          src={\"https://images.ctfassets.net/hrltx12pl8hq/7yQR5uJhwEkRfjwMFJ7bUK/dc52a0913e8ff8b5c276177890eb0129/offset_comp_772626-opt.jpg?fit=fill&w=800&h=300\"}\n          alt={\"background\"}\n        />\n      </div>\n      <div className={s.descriptionBlock}>\n          Ava + description</div>\n        {/*<img src={props.userProfile.photos.large} />*/}\n    </div>\n  );\n};\n","import React from \"react\";\nimport s from \"./Post.module.css\";\n\nexport type PostPropsType = {\n  id: number;\n  postText: string;\n  likesCount: number;\n};\n\nexport const Post = (props: PostPropsType) => {\n  return (\n    <div className={s.item}>\n      <img\n          src={\n              \"https://png.pngtree.com/png-clipart/20190920/original/pngtree-happy-fox-avatar-illustration-png-image_4677278.jpg\"\n          }\n\n          alt={\"person photo\"}\n      />\n      {props.postText}\n      <div>\n        <span>{props.likesCount}</span>\n      </div>\n    </div>\n  );\n};\n","import React from \"redux\";\nimport {addPost, InitialProfileStateType, updateNewPostText} from \"../../../redux/profileReducer\";\nimport {MyPosts} from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {ReduxRootStateType} from \"../../../redux/redux-store\";\n\nconst mapStateToProps = (state: ReduxRootStateType): InitialProfileStateType => {\n    return {\n        posts: state.profilePage.posts,\n        newPostText: state.profilePage.newPostText,\n        userProfile: state.profilePage.userProfile\n    }\n}\n\nexport const MyPostsContainer = connect(mapStateToProps, {\n    updateNewPostText,\n    addPost,\n})(MyPosts)\n","import React, { ChangeEvent } from \"react\";\nimport s from \"./MyPosts.module.css\";\nimport { Post, PostPropsType as PostType } from \"./Post/Post\";\n\ntype MyPostsPropsType = {\n  posts: Array<PostType>;\n  newPostText: string;\n  updateNewPostText: (inputPostText: string) => void;\n  addPost: () => void;\n};\n\nexport const MyPosts = (props: MyPostsPropsType) => {\n  const postsElements = props.posts.map((post) => (\n    <Post postText={post.postText} likesCount={post.likesCount} id={post.id} />\n  ));\n\n  const onPostAdding = () => {\n    props.addPost();\n  };\n\n  const onPostChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\n    props.updateNewPostText(event.currentTarget.value);\n  };\n\n  return (\n    <div className={s.postsBlock}>\n      <h3>My posts</h3>\n      <div>\n        <div>\n          <textarea value={props.newPostText} onChange={onPostChange} />\n        </div>\n        <div>\n          <button onClick={onPostAdding}>Add post</button>\n        </div>\n      </div>\n      <div className={s.posts}>{postsElements}</div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { ProfileInfo } from \"./ProfileInfo/ProfileInfo\";\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\nimport {UserProfileType} from \"../../redux/profileReducer\";\n\nexport type ProfilePropsType = {\n    userProfile: UserProfileType;\n};\n\nexport const Profile = (props: ProfilePropsType) => {\n  return (\n    <div>\n      <ProfileInfo userProfile={props.userProfile}/>\n      <MyPostsContainer />\n    </div>\n  );\n};\n","import React from \"react\";\nimport {Profile} from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {getUserProfile, UserProfileType} from \"../../redux/profileReducer\";\nimport {ReduxRootStateType} from \"../../redux/redux-store\";\nimport {Redirect, RouteComponentProps, withRouter} from \"react-router-dom\";\n\n\ntype MapStatePropsType = {\n    userProfile: UserProfileType;\n    isAuth: boolean\n};\ntype MapDispatchPropsType = {\n    getUserProfile: (userId: number) => void;\n};\ntype ProfileClassContainerPropsType = MapStatePropsType & MapDispatchPropsType;\ntype ProfilePathParamsType = {\n    userId: string;\n};\ntype ProfileClassContainerURLPropsType = RouteComponentProps<ProfilePathParamsType> &\n    ProfileClassContainerPropsType;\n\n\nclass ProfileClassContainer extends React.Component<\n    ProfileClassContainerURLPropsType,\n    UserProfileType>{\n\n    componentDidMount() {\n        let userId = Number(this.props.match.params.userId);\n        if (!userId) {\n            userId = 2;\n        }\n        this.props.getUserProfile(userId)\n    }\n    render = () => {\n        if (!this.props.isAuth) return <Redirect to={'/login'}/>\n        return (\n            <div>\n                <Profile {...this.props} userProfile={this.props.userProfile}/>\n            </div>\n        );\n    };\n    }\n\nconst ProfileURLContainer = withRouter(ProfileClassContainer);\nlet mapStateToProps = (state: ReduxRootStateType): MapStatePropsType => ({\n    userProfile: state.profilePage.userProfile,\n    isAuth: state.auth.isAuth\n\n})\n\nexport const ProfileContainer =  connect(mapStateToProps,{getUserProfile} )(\n    ProfileURLContainer)","import React from \"react\";\nimport s from \"./Header.module.css\";\nimport { NavLink } from \"react-router-dom\";\n\ntype HeaderPropsType = {\n    isAuth: boolean;\n    login: string | null;\n};\n\nexport const Header = (props:HeaderPropsType ) => {\n  return (\n    <header className={s.header}>\n      <img\n        src={\"https://cdn.logo.com/hotlink-ok/logo-social-sq.png\"}\n        alt={\"Logo\"}\n      />\n        <div className={s.loginBlock}>\n            {props.isAuth? props.login\n            :<NavLink to={'/login'}>Login</NavLink> }\n\n        </div>\n    </header>\n  );\n};\n","import React from \"react\";\nimport {Header} from \"./Header\";\nimport {connect} from \"react-redux\";\nimport {ReduxRootStateType} from \"../../redux/redux-store\";\nimport {getAuthUserData} from \"../../redux/authReducer\";\n\n\ntype MapStatePropsType = {\n    isAuth: boolean,\n    login: string | null,\n};\ntype MapDispatchPropsType = {\n    getAuthUserData: () => void\n};\n\ntype HeaderClassContainerPropsType = MapStatePropsType & MapDispatchPropsType;\n\nexport class HeaderClassContainer extends React.Component<HeaderClassContainerPropsType> {\n    componentDidMount() {\n   this.props.getAuthUserData()\n    }\n\n    render = () => {\n        return <Header {...this.props}/>\n    }\n}\n\nconst mapStateToProps = (state: ReduxRootStateType): MapStatePropsType => ({\n    isAuth: state.auth.isAuth,\n    login: state.auth.login,\n})\nexport const HeaderContainer = connect(mapStateToProps, {getAuthUserData})(\n    HeaderClassContainer);\n","import React from \"react\";\r\n\r\nexport const Login = () => {\r\n    return <h1>Login</h1>\r\n}","import React from \"react\";\nimport {Route} from \"react-router-dom\";\nimport s from \"./App.module.css\";\nimport {Navbar} from \"./components/Navbar/Navbar\";\nimport {DialoguesContainer} from \"./components/Dialogues/DialoguesContainer\";\nimport UsersContainer from \"./components/Users/UsersContainer\";\nimport {ProfileContainer} from \"./components/Profile/ProfileContainer\";\nimport {HeaderContainer} from \"./components/Header/HeaderContainer\";\nimport {Login} from \"./components/Login/Login\";\n\n\nexport function App() {\n    return (\n        <div className={s.appWrapper}>\n            <HeaderContainer/>\n            <Navbar/>\n            <div className={s.appWrapperContent}>\n                <Route path={\"/profile/:userID?\"} render={() => <ProfileContainer/>}/>\n                <Route path={\"/dialogues\"} render={() => <DialoguesContainer/>}/>\n                <Route path={\"/users\"} render={() => <UsersContainer/>}/>\n                <Route path={\"/login\"} render={() => <Login/>}/>\n\n            </div>\n        </div>\n    );\n}\n","import React from \"react\";\nimport \"./index.css\";\nimport { reduxStore } from \"./redux/redux-store\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\n\n\n\n  ReactDOM.render(\n    <BrowserRouter>\n      <Provider store={reduxStore}>\n        <App />\n      </Provider>\n    </BrowserRouter>,\n    document.getElementById(\"root\"));\n\n\n\n"],"sourceRoot":""}