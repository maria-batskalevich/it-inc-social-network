{"version":3,"file":"static/js/510.f7395b91.chunk.js","mappings":"0OAYMA,EAA4DC,EAAAA,MAC9D,YAA4B,IAA1BC,EAAyB,EAAzBA,aAAcC,EAAW,EAAXA,MACZ,OACI,kBAAMC,SAAUF,EAAhB,WACI,0BACI,SAACG,EAAA,EAAD,CACIC,UAAWC,EAAAA,EACXC,KAAM,QACNC,YAAa,QACbC,SAAU,CAACC,EAAAA,SAGnB,0BACI,SAACN,EAAA,EAAD,CACIC,UAAWC,EAAAA,EACXC,KAAM,WACNI,KAAM,WACNH,YAAa,WACbC,SAAU,CAACC,EAAAA,SAGnB,4BACI,SAACN,EAAA,EAAD,CAAOC,UAAWC,EAAAA,EAAOC,KAAM,aAAcI,KAAM,aADvD,iBAICT,IACG,gBAAKU,UAAWC,EAAAA,EAAAA,eAAhB,SAAyCX,KAE7C,0BACI,+CAOpB,GAAeY,EAAAA,EAAAA,GAA6B,CAAEC,KAAM,aAApD,CAAmEhB,G,UC3CtDiB,EAAQhB,EAAAA,MAAW,YAAwC,IAArCiB,EAAoC,EAApCA,MAK/B,OALmE,EAA7BC,QAKnB,SAAC,KAAD,CAAUC,GAAI,cAGzB,4BACI,oCACA,SAAC,EAAD,CAAWhB,SATN,SAACiB,GAAD,OACbH,EAAMG,EAASC,MAAOD,EAASE,SAAUF,EAASG,qB,mBCc1D,GAJuBC,EAAAA,EAAAA,KAJC,SAACC,GAAD,MAAmD,CACvEP,OAAQO,EAAMC,KAAKR,UAMkB,CAACD,MAAAA,EAAAA,IAHnBO,CAG2BR,I,6LChB5CW,EAAqC3B,EAAAA,MAAW,YAAyB,IAAtB4B,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACrDC,EAAoBF,EAAKG,SAAWH,EAAK1B,MAE/C,OACI,iBACIU,UAAWC,EAAAA,EAAAA,YAAsB,KAAOiB,EAAWjB,EAAAA,EAAAA,MAAgB,IADvE,WAGI,yBAAMgB,KACN,yBAAMC,IAAY,0BAAOF,EAAK1B,gBAK7B8B,EAAkChC,EAAAA,MAAW,SAACiC,GACPA,EAAxCJ,SAAR,IAAkBK,EAA8BD,EAA9BC,MAAgBC,GAAcF,EAAvBL,MAAzB,OAAgDK,EAAhD,IACA,OACI,SAACN,GAAD,kBAAiBM,GAAjB,cACI,uCAAcC,GAAWC,UAKxB7B,EAA+BN,EAAAA,MAAW,SAACiC,GACJA,EAAxCJ,SAAR,IAAkBK,EAA8BD,EAA9BC,MAAgBC,GAAcF,EAAvBL,MAAzB,OAAgDK,EAAhD,IACA,OACI,SAACN,GAAD,kBAAiBM,GAAjB,cACI,oCAAWC,GAAWC,W,8EC1B3B,IAI0BC,EAJpB1B,EAAgC,SAAC2B,GAC1C,OAAGA,EAAc,KACV,qBAOEC,GALoBF,EAKW,GALW,SAACC,GACpD,OAAGA,EAAME,OAASH,EAAkB,KAC9B,iBAAN,OAAwBA,EAAxB,e,mBCTJ,KAAgB,YAAc,kCAAkC,MAAQ,4BAA4B,eAAiB","sources":["components/Login/LoginForm.tsx","components/Login/Login.tsx","components/Login/LoginContainer.ts","components/common/FormControls/FormControls.tsx","utils/validators/validators.tsx","webpack://way-of-samurai/./src/components/common/FormControls/FormControls.module.css?7a3d"],"sourcesContent":["import React from \"react\";\r\nimport { Field, InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport {Input} from \"../common/FormControls/FormControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport classes from \"../common/FormControls/FormControls.module.css\";\r\n\r\nexport type LoginFormDataType = {\r\n    email: string;\r\n    password: string;\r\n    rememberMe: boolean;\r\n};\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormDataType>> = React.memo(\r\n    ({handleSubmit, error}) => {\r\n        return (\r\n            <form onSubmit={handleSubmit}>\r\n                <div>\r\n                    <Field\r\n                        component={Input}\r\n                        name={\"email\"}\r\n                        placeholder={\"Email\"}\r\n                        validate={[required]}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Field\r\n                        component={Input}\r\n                        name={\"password\"}\r\n                        type={\"password\"}\r\n                        placeholder={\"Password\"}\r\n                        validate={[required]}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Field component={Input} name={\"rememberMe\"} type={\"checkbox\"} />\r\n                    Remember me\r\n                </div>\r\n                {error && (\r\n                    <div className={classes.formLevelError}>{error}</div>\r\n                )}\r\n                <div>\r\n                    <button>Log in</button>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n);\r\n\r\nexport default reduxForm<LoginFormDataType>({ form: \"loginForm\" })(LoginForm);","import React from \"react\";\r\nimport {LoginPropsType} from \"./LoginContainer\";\r\nimport LoginForm, {LoginFormDataType} from \"./LoginForm\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport const Login = React.memo(({ login, isAuth }: LoginPropsType) => {\r\n    const onSubmit = (formData: LoginFormDataType) =>\r\n        login(formData.email, formData.password, formData.rememberMe);\r\n    // props.login !== loginTC , connect()() from LoginContainer passed eponymous callback via props, which dispatches loginTC inside of itself !\r\n\r\n    if (isAuth) return <Redirect to={\"/profile\"} />;\r\n    else\r\n        return (\r\n            <div>\r\n                <h1>Log in</h1>\r\n                <LoginForm onSubmit={onSubmit} />\r\n            </div>\r\n        );\r\n});","import {ReduxRootStateType} from \"../../redux/redux-store\";\r\nimport {Login} from \"./Login\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/authReducer\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean;\r\n};\r\ntype MapDispatchPropsType = {\r\n    login: (email: string, password: string, rememberMe?: boolean) => void;\r\n};\r\nexport type LoginPropsType = MapStatePropsType & MapDispatchPropsType;\r\n\r\nconst mapStateToProps = (state: ReduxRootStateType): MapStatePropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n});\r\n\r\nconst LoginContainer = connect<MapStatePropsType,\r\n    MapDispatchPropsType,\r\n    unknown,\r\n    ReduxRootStateType>(mapStateToProps, {login})(Login);\r\nexport default LoginContainer;","import React, { FC } from \"react\";\r\nimport { WrappedFieldProps } from \"redux-form\";\r\nimport classes from \"../FormControls/FormControls.module.css\";\r\n\r\nconst FormControl: FC<WrappedFieldProps> = React.memo(({ meta, children }) => {\r\n    const hasError: boolean = meta.touched && meta.error; // if Field was touched and there is an error ( validate[] )\r\n\r\n    return (\r\n        <div\r\n            className={classes.formControl + \" \" + (hasError ? classes.error : \"\")}\r\n        >\r\n            <div>{children}</div>\r\n            <div>{hasError && <span>{meta.error}</span>}</div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport const Textarea: FC<WrappedFieldProps> = React.memo((props) => {\r\n    const { children, input, meta, ...restProps } = props;\r\n    return (\r\n        <FormControl {...props}>\r\n            <textarea {...input} {...restProps} />\r\n        </FormControl>\r\n    );\r\n});\r\n\r\nexport const Input: FC<WrappedFieldProps> = React.memo((props) => {\r\n    const { children, input, meta, ...restProps } = props;\r\n    return (\r\n        <FormControl {...props}>\r\n            <input {...input} {...restProps} />\r\n        </FormControl>\r\n    );\r\n});","import React from \"react\";\r\n\r\ntype FieldValidatorType = (value: string) => string | null;\r\n\r\nexport const required: FieldValidatorType  = (value) => {\r\n    if(value) return null\r\n    return 'Field is required'\r\n}\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if(value.length < maxLength) return null\r\n    return `Max length is ${maxLength} symbols`\r\n}\r\n\r\nexport const maxLenght20 = maxLengthCreator(20)","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormControls_formControl__YxJOw\",\"error\":\"FormControls_error__ukpSl\",\"formLevelError\":\"FormControls_formLevelError__pBrdE\"};"],"names":["LoginForm","React","handleSubmit","error","onSubmit","Field","component","Input","name","placeholder","validate","required","type","className","classes","reduxForm","form","Login","login","isAuth","to","formData","email","password","rememberMe","connect","state","auth","FormControl","meta","children","hasError","touched","Textarea","props","input","restProps","maxLength","value","maxLenght20","length"],"sourceRoot":""}