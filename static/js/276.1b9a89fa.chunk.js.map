{"version":3,"file":"static/js/276.1b9a89fa.chunk.js","mappings":"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","sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://way-of-samurai/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://way-of-samurai/./src/components/Profile/MyPosts/AddPostForm/AddPostForm.module.css?7b47","components/Profile/MyPosts/AddPostForm/AddPostForm.tsx","webpack://way-of-samurai/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","redux/profileSelectors.ts","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/common/FormControls/FormControls.tsx","utils/validators/validators.tsx","webpack://way-of-samurai/./src/components/common/FormControls/FormControls.module.css?7a3d","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__y+ySX\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string;\r\n    updateUserStatus: (status: string) => void;\r\n};\r\n\r\nexport const ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => setEditMode(true)\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateUserStatus(status)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <span onDoubleClick={activateEditMode}>{props.status || 'No status1230'}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input\r\n                    onBlur={deactivateEditMode}\r\n                    autoFocus\r\n                    onChange={onStatusChange}\r\n                    value={status}\r\n                />\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\nimport s from \"./ProfileInfo.module.css\";\nimport {ProfilePropsType as ProfileInfoPropsType} from \"../Profile\";\nimport {Preloader} from \"../../common/Preloader/Preloader\";\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\n\nexport const ProfileInfo = React.memo(\n    ({userProfile, updateUserStatus, status}: ProfileInfoPropsType) => {\n        if (!userProfile.userId) {\n            return <Preloader/>\n        } else\n            return (\n                <div>\n                    <div>\n                        <img className={s.image}\n                             src={\"https://images.ctfassets.net/hrltx12pl8hq/7yQR5uJhwEkRfjwMFJ7bUK/dc52a0913e8ff8b5c276177890eb0129/offset_comp_772626-opt.jpg?fit=fill&w=800&h=300\"}\n                             alt={\"background\"}\n                        />\n                    </div>\n                    <div className={s.descriptionBlock}>\n                        Ava + description\n                    </div>\n                    <img alt={'users photo'} src={userProfile.photos.large}/>\n                    <ProfileStatusWithHooks\n                        status={status}\n                        updateUserStatus={updateUserStatus}/>\n                </div>\n            );\n    }\n)\n\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__xR9zf\",\"posts\":\"MyPosts_posts__38d7t\"};","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"AddPostForm_btn__wmCjM\"};","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../../common/FormControls/FormControls\";\r\nimport {maxLenght20, required} from \"../../../../utils/validators/validators\";\r\nimport s from './AddPostForm.module.css'\r\n\r\n\r\nexport type AddPostFormDataType = {\r\n    newPostText: string;\r\n};\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<AddPostFormDataType>\r\n    > = React.memo(({ handleSubmit }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    component={Textarea}\r\n                    placeholder={\"Post text\"}\r\n                    name={\"newPostText\"}\r\n                    validate={[required, maxLenght20]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button className={s.btn}>Add post</button>\r\n            </div>\r\n        </form>\r\n    );\r\n});\r\n\r\nexport default reduxForm<AddPostFormDataType>({\r\n    form: \"profileAddPostForm\",\r\n})(AddPostForm);","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__Ju2Yi\",\"btn\":\"Post_btn__CqRHX\"};","import React from \"react\";\nimport s from \"./Post.module.css\";\nimport {PostType} from \"../../../../redux/profileReducer\";\n\ntype PostPropsType = PostType & {\n    deletePost: (postId: number) => void;\n};\n\nexport const Post = React.memo(\n    ({deletePost, postText, likesCount, id}: PostPropsType) => {\n        const onClickHandler = () => deletePost(id);\n        return (\n            <div className={s.item}>\n                <img\n                    src={\n                        \"https://png.pngtree.com/png-clipart/20190920/original/pngtree-happy-fox-avatar-illustration-png-image_4677278.jpg\"\n                    }\n\n                    alt={\"person photo\"}\n                />\n                {postText}\n                <div>\n                    <span>{likesCount}</span>\n                </div>\n                <button onClick={onClickHandler} className={s.btn}>\n                    Delete post\n                </button>\n            </div>\n        );\n    }\n);\n","import React from \"react\";\nimport s from \"./MyPosts.module.css\";\nimport AddPostForm, {AddPostFormDataType} from \"./AddPostForm/AddPostForm\";\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\nimport {Post} from \"./Post/Post\";\n\nexport const MyPosts = React.memo(\n    ({posts, addPost, deletePost}: MyPostsPropsType) => {\n    const postsElements = posts.map((post) => (\n        <Post\n            key={post.id}\n            postText={post.postText}\n            likesCount={post.likesCount}\n            id={post.id}\n            deletePost={deletePost}\n        />\n    ));\n\n    const onPostAdding = (values: AddPostFormDataType) => {\n        addPost(values.newPostText);\n    };\n\n    return (\n        <div className={s.postsBlock}>\n            <h3>My posts</h3>\n            <div>\n                <AddPostForm onSubmit={onPostAdding}/>\n            </div>\n            <div className={s.posts}>{postsElements}</div>\n        </div>\n    );\n});\n","import {PostType, UserProfileType} from \"./profileReducer\";\r\nimport {ReduxRootStateType} from \"./redux-store\";\r\n\r\nexport const selectUserProfile = (state: ReduxRootStateType): UserProfileType =>\r\n    state.profilePage.userProfile;\r\nexport const selectStatus = (state: ReduxRootStateType): string =>\r\n    state.profilePage.status;\r\nexport const selectPosts = (state: ReduxRootStateType): Array<PostType> =>\r\n    state.profilePage.posts;","import React from \"redux\";\r\nimport {addPost, deletePost} from \"../../../redux/profileReducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {ReduxRootStateType} from \"../../../redux/redux-store\";\r\nimport {selectPosts} from \"../../../redux/profileSelectors\";\r\n\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>;\r\ntype MapDispatchPropsType = {\r\n    addPost: (newPostText: string) => void;\r\n    deletePost: (postId: number) => void;\r\n};\r\nexport type MyPostsPropsType = MapStatePropsType & MapDispatchPropsType;\r\n\r\nconst mapStateToProps = (state: ReduxRootStateType) => {\r\n    return {\r\n        posts: selectPosts(state),\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect<\r\n    MapStatePropsType,\r\n    MapDispatchPropsType,\r\n    unknown,\r\n    ReduxRootStateType\r\n    >(mapStateToProps, {\r\n    addPost, deletePost\r\n})(MyPosts)\r\n","import React from \"react\";\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\nimport {UserProfileType} from \"../../redux/profileReducer\";\n\nexport type ProfilePropsType = {\n    userProfile: UserProfileType;\n    status: string\n    updateUserStatus: (status: string) => void\n\n};\n\nexport const Profile = React.memo(\n    ({userProfile, updateUserStatus, status}: ProfilePropsType) => {\n    return (\n        <div>\n            <ProfileInfo\n                userProfile={userProfile}\n                status={status}\n                updateUserStatus={updateUserStatus}\n            />\n            <MyPostsContainer/>\n        </div>\n    );\n}\n);\n","import React from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getUserProfile, getUserStatus, updateUserStatus, UserProfileType} from \"../../redux/profileReducer\";\r\nimport {ReduxRootStateType} from \"../../redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from 'redux';\r\n\r\ntype MapStatePropsType = {\r\n    userProfile: UserProfileType;\r\n    status: string\r\n\r\n};\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: any) => void;\r\n    getUserStatus: (userId: any) => void\r\n    updateUserStatus: (status: string) => void;\r\n};\r\ntype ProfileClassContainerPropsType = MapStatePropsType & MapDispatchPropsType;\r\n\r\ntype ProfilePathParamsType = {\r\n    userId: string;\r\n};\r\n\r\ntype ProfileClassContainerURLPropsType = RouteComponentProps<ProfilePathParamsType> &\r\n    ProfileClassContainerPropsType;\r\n\r\n\r\nclass ProfileClassContainer extends React.PureComponent<ProfileClassContainerURLPropsType,\r\n    UserProfileType> {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = '2'\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getUserStatus(userId)\r\n    }\r\n\r\n    render = () => {\r\n        return (\r\n            <div>\r\n                <Profile\r\n                    userProfile={this.props.userProfile}\r\n                    status={this.props.status}\r\n                    updateUserStatus={this.props.updateUserStatus}/>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nlet mapStateToProps = (state: ReduxRootStateType): MapStatePropsType => ({\r\n    userProfile: state.profilePage.userProfile,\r\n    status: state.profilePage.status\r\n})\r\n\r\nconst ProfileContainer = compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getUserStatus, updateUserStatus}),\r\n    withRouter,\r\n    // withAuthRedirect\r\n)\r\n(ProfileClassContainer)\r\nexport default ProfileContainer;\r\n","import React, { FC } from \"react\";\r\nimport { WrappedFieldProps } from \"redux-form\";\r\nimport classes from \"../FormControls/FormControls.module.css\";\r\n\r\nconst FormControl: FC<WrappedFieldProps> = React.memo(({ meta, children }) => {\r\n    const hasError: boolean = meta.touched && meta.error; // if Field was touched and there is an error ( validate[] )\r\n\r\n    return (\r\n        <div\r\n            className={classes.formControl + \" \" + (hasError ? classes.error : \"\")}\r\n        >\r\n            <div>{children}</div>\r\n            <div>{hasError && <span>{meta.error}</span>}</div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport const Textarea: FC<WrappedFieldProps> = React.memo((props) => {\r\n    const { children, input, meta, ...restProps } = props;\r\n    return (\r\n        <FormControl {...props}>\r\n            <textarea {...input} {...restProps} />\r\n        </FormControl>\r\n    );\r\n});\r\n\r\nexport const Input: FC<WrappedFieldProps> = React.memo((props) => {\r\n    const { children, input, meta, ...restProps } = props;\r\n    return (\r\n        <FormControl {...props}>\r\n            <input {...input} {...restProps} />\r\n        </FormControl>\r\n    );\r\n});","import React from \"react\";\r\n\r\ntype FieldValidatorType = (value: string) => string | null;\r\n\r\nexport const required: FieldValidatorType  = (value) => {\r\n    if(value) return null\r\n    return 'Field is required'\r\n}\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if(value.length < maxLength) return null\r\n    return `Max length is ${maxLength} symbols`\r\n}\r\n\r\nexport const maxLenght20 = maxLengthCreator(20)","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormControls_formControl__YxJOw\",\"error\":\"FormControls_error__ukpSl\",\"formLevelError\":\"FormControls_formLevelError__pBrdE\"};","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onBlur","updateUserStatus","autoFocus","onChange","e","currentTarget","value","ProfileInfo","React","userProfile","userId","className","s","src","alt","photos","large","Preloader","AddPostForm","handleSubmit","onSubmit","Field","component","Textarea","placeholder","name","validate","required","maxLenght20","reduxForm","form","Post","deletePost","postText","likesCount","id","onClick","MyPosts","posts","addPost","postsElements","map","post","values","newPostText","selectPosts","state","profilePage","MyPostsContainer","connect","Profile","ProfileClassContainer","render","this","match","params","getUserProfile","getUserStatus","compose","withRouter","FormControl","meta","children","hasError","touched","error","classes","input","restProps","Input","maxLength","length","_slicedToArray","arr","i","Array","isArray","_i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","push","err","unsupportedIterableToArray","TypeError"],"sourceRoot":""}