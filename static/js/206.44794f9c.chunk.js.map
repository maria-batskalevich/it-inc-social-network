{"version":3,"file":"static/js/206.44794f9c.chunk.js","mappings":"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","sources":["webpack://way-of-samurai/./src/components/Users/User/User.module.css?cfea","components/Users/User/User.tsx","webpack://way-of-samurai/./src/components/common/Paginator/Paginator.module.css?6caa","components/common/Paginator/Paginator.tsx","components/Users/Users.tsx","redux/usersSelectors.ts","components/Users/UsersContainer.tsx","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"userPhoto\":\"User_userPhoto__OFsYd\"};","import {UserType} from \"../../../api/api\";\r\nimport React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport userAvatar from \"../../../assets/images/user.png\";\r\nimport s from \"../User/User.module.css\";\r\n\r\ntype UserPropsType = {\r\n    user: UserType;\r\n    followingInProgress: Array<number>;\r\n    follow: (userID: number) => void;\r\n    unfollow: (userID: number) => void;\r\n};\r\n\r\nexport const User = React.memo(\r\n    ({ user, followingInProgress, follow, unfollow }: UserPropsType) => {\r\n        return (\r\n            <div>\r\n        <span>\r\n          <div>\r\n            <NavLink to={`/profile/${user.id}`}>\r\n              <img\r\n                  className={s.userPhoto}\r\n                  src={user.photos.small ? user.photos.small : userAvatar}\r\n                  alt={\"user avatar\"}\r\n              />\r\n            </NavLink>\r\n          </div>\r\n          <div>\r\n            {user.followed ? (\r\n                <button\r\n                    style={{ cursor: \"pointer\" }}\r\n                    disabled={followingInProgress.some((id) => id === user.id)}\r\n                    onClick={() => unfollow(user.id)}\r\n                >\r\n                    Unfollow\r\n                </button>\r\n            ) : (\r\n                <button\r\n                    style={{ cursor: \"pointer\" }}\r\n                    disabled={followingInProgress.some((id) => id === user.id)}\r\n                    onClick={() => follow(user.id)}\r\n                >\r\n                    Follow\r\n                </button>\r\n            )}\r\n          </div>\r\n        </span>\r\n                <span>\r\n          <span>\r\n            <div>{user.name}</div>\r\n            <div>{user.status}</div>\r\n          </span>\r\n        </span>\r\n            </div>\r\n        );\r\n    }\r\n);","// extracted by mini-css-extract-plugin\nexport default {\"selectedPage\":\"Paginator_selectedPage__Nf8Yc\",\"page\":\"Paginator_page__UsXS-\",\"paginator\":\"Paginator_paginator__xYFJW\",\"btn\":\"Paginator_btn__hBNNg\"};","import React, {useState} from \"react\";\r\nimport s from \"./Paginator.module.css\";\r\n\r\ntype PaginatorPropsType = {\r\n    pageSize: number;\r\n    totalItemsCount: number;\r\n    currentPage: number;\r\n    onPageChange: (page: number) => void;\r\n    portionSize: number;\r\n};\r\n\r\nexport const Paginator = React.memo(\r\n    ({\r\n         totalItemsCount,\r\n         pageSize,\r\n         onPageChange,\r\n         currentPage,\r\n         portionSize,\r\n     }: PaginatorPropsType) => {\r\n        const [portionNumber, setPortionNumber] = useState(1);\r\n        const pagesCount = Math.ceil(totalItemsCount / pageSize); // Math.ceil() - rounding to higher integer\r\n        const portionsCount = Math.ceil(pagesCount / portionSize); // portionsCount === number of \"portions\", which pagination is split into\r\n\r\n        const leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n        const rightPortionPageNumber = portionNumber * portionSize;\r\n        const pages: Array<number> = [];\r\n        for (let i = 1; i <= pagesCount; i++) {\r\n            pages.push(i);\r\n        }\r\n\r\n        return (\r\n            <div className={s.paginator}>\r\n                {portionNumber > 1 && (\r\n                    <button\r\n                        onClick={() => setPortionNumber(portionNumber - 1)}\r\n                        className={s.btn}\r\n                    >\r\n                        {\"<\"}\r\n                    </button>\r\n                )}\r\n\r\n                {pages\r\n                    .filter(\r\n                        (page) =>\r\n                            page >= leftPortionPageNumber && page <= rightPortionPageNumber\r\n                    )\r\n                    .map((page) => {\r\n                        return (\r\n                            <span\r\n                                key={page}\r\n                                onClick={() => {\r\n                                    onPageChange(page);\r\n                                }}\r\n                                className={\r\n                                    currentPage === page ? s.selectedPage : s.page\r\n                                }\r\n                            >\r\n                {page}\r\n              </span>\r\n                        );\r\n                    })}\r\n                {portionsCount > portionNumber && (\r\n                    <button\r\n                        onClick={() => {\r\n                            setPortionNumber(portionNumber + 1);\r\n                        }}\r\n                        className={s.btn}\r\n                    >\r\n                        {\">\"}\r\n                    </button>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n);","import React from \"react\";\r\nimport {UserType} from \"../../api/api\";\r\nimport {User} from \"./User/User\";\r\nimport {Paginator} from \"../common/Paginator/Paginator\";\r\n\r\nexport type UsersPropsType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    users: Array<UserType>,\r\n    follow: (userId: any) => void\r\n    unfollow: (userId: any) => void\r\n    followingInProgress: Array<number>\r\n}\r\n\r\nexport const Users = React.memo(\r\n    ({\r\n         totalUsersCount,\r\n         pageSize,\r\n         onPageChanged,\r\n         currentPage,\r\n         users,\r\n         followingInProgress,\r\n         follow,\r\n         unfollow,\r\n     }: UsersPropsType) => {\r\n        return (\r\n            <div>\r\n                <Paginator\r\n                    currentPage={currentPage}\r\n                    onPageChange={onPageChanged}\r\n                    pageSize={pageSize}\r\n                    totalItemsCount={totalUsersCount}\r\n                    portionSize={10}\r\n                />\r\n                {users.map((user) => (\r\n                    <User\r\n                        key={user.id}\r\n                        user={user}\r\n                        followingInProgress={followingInProgress}\r\n                        follow={follow}\r\n                        unfollow={unfollow}\r\n                    />\r\n                ))}\r\n            </div>\r\n        )\r\n    })\r\n\r\n","import {UserType} from \"../api/api\";\r\nimport {ReduxRootStateType} from \"./redux-store\";\r\n\r\nexport const selectUsers = (state: ReduxRootStateType): UserType[] => {\r\n    return state.usersPage.users\r\n}\r\n\r\nexport const selectPageSize = (state: ReduxRootStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\n\r\nexport const selectTotalUsersCount = (state: ReduxRootStateType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\n\r\nexport const selectCurrentPage = (state: ReduxRootStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\n\r\nexport const selectIsFetching = (state: ReduxRootStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\n\r\nexport const selectFollowingInProgress = (state: ReduxRootStateType) => {\r\n    return state.usersPage.followingInProgress\r\n}\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {ReduxRootStateType} from \"../../redux/redux-store\";\r\nimport {Users} from \"./Users\";\r\nimport {Preloader} from \"../common/Preloader/Preloader\";\r\nimport {\r\n    follow, getUsers, setCurrentPage, unfollow\r\n} from \"../../redux/usersReducer\";\r\nimport {UserType} from \"../../api/api\";\r\nimport {\r\n    selectCurrentPage, selectFollowingInProgress,\r\n    selectIsFetching,\r\n    selectPageSize,\r\n    selectTotalUsersCount,\r\n    selectUsers\r\n} from \"../../redux/usersSelectors\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    users: Array<UserType>,\r\n    pageSize: number,\r\n    totalUsersCount: number,\r\n    currentPage: number,\r\n    isFetching: boolean,\r\n    followingInProgress: Array<number>,\r\n};\r\ntype MapDispatchPropsType = {\r\n    follow: (userId: any) => void;\r\n    unfollow: (userId: any) => void;\r\n    setCurrentPage: (currentPage: number) => void\r\n    getUsers: (pageNumber: number, pageSize: number) => void\r\n};\r\n\r\nexport type UsersClassContainerPropsType = MapStatePropsType & MapDispatchPropsType;\r\n\r\nclass UsersClassContainer extends React.PureComponent <UsersClassContainerPropsType,\r\n    Array<UserType>> {\r\n\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize);\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.setCurrentPage(pageNumber);\r\n        this.props.getUsers(pageNumber, this.props.pageSize);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.props.isFetching ? <Preloader/> : null}\r\n                <Users users={this.props.users}\r\n                       totalUsersCount={this.props.totalUsersCount}\r\n                       pageSize={this.props.pageSize}\r\n                       currentPage={this.props.currentPage}\r\n                       onPageChanged={this.onPageChanged}\r\n                       follow={this.props.follow}\r\n                       unfollow={this.props.unfollow}\r\n                       followingInProgress={this.props.followingInProgress}\r\n                />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: ReduxRootStateType): MapStatePropsType => ({\r\n    users: selectUsers(state),\r\n    pageSize: selectPageSize(state),\r\n    totalUsersCount: selectTotalUsersCount(state),\r\n    currentPage: selectCurrentPage(state),\r\n    isFetching: selectIsFetching(state),\r\n    followingInProgress: selectFollowingInProgress(state),\r\n\r\n}) as MapStatePropsType\r\n\r\n\r\n\r\nconst UsersContainer = connect<MapStatePropsType, MapDispatchPropsType, unknown, ReduxRootStateType>\r\n(mapStateToProps, {\r\n        follow, unfollow, setCurrentPage, getUsers,\r\n    })(UsersClassContainer)\r\n\r\nexport default UsersContainer;\r\n\r\n\r\n","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["User","React","user","followingInProgress","follow","unfollow","to","id","className","s","src","photos","small","userAvatar","alt","followed","style","cursor","disabled","some","onClick","name","status","Paginator","totalItemsCount","pageSize","onPageChange","currentPage","portionSize","useState","portionNumber","setPortionNumber","pagesCount","Math","ceil","portionsCount","leftPortionPageNumber","rightPortionPageNumber","pages","i","push","filter","page","map","Users","totalUsersCount","onPageChanged","users","selectUsers","state","usersPage","selectPageSize","selectTotalUsersCount","selectCurrentPage","selectIsFetching","isFetching","selectFollowingInProgress","UsersClassContainer","pageNumber","props","setCurrentPage","getUsers","this","Preloader","connect","_slicedToArray","arr","Array","isArray","_i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","value","length","err","unsupportedIterableToArray","TypeError"],"sourceRoot":""}